"use strict";(self.webpackChunkgsoc_blog=self.webpackChunkgsoc_blog||[]).push([[72],{3905:function(e,t,n){n.d(t,{Zo:function(){return s},kt:function(){return d}});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function u(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},s=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,s=u(e,["components","mdxType","originalType","parentName"]),p=l(n),d=o,y=p["".concat(c,".").concat(d)]||p[d]||m[d]||a;return n?r.createElement(y,i(i({ref:t},s),{},{components:n})):r.createElement(y,i({ref:t},s))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=p;var u={};for(var c in t)hasOwnProperty.call(t,c)&&(u[c]=t[c]);u.originalType=e,u.mdxType="string"==typeof e?e:o,i[1]=u;for(var l=2;l<a;l++)i[l]=n[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},77790:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return u},contentTitle:function(){return c},metadata:function(){return l},toc:function(){return s},default:function(){return p}});var r=n(87462),o=n(63366),a=(n(67294),n(3905)),i=["components"],u={sidebar_position:1},c="Summary of ADL, CPOs, Taxonomy",l={unversionedId:"c++/ADL, CPOs, Taxonomy Summary",id:"c++/ADL, CPOs, Taxonomy Summary",isDocsHomePage:!1,title:"Summary of ADL, CPOs, Taxonomy",description:"- CppCon 2019 introduction in name taxonomy, customization points and use cases",source:"@site/docs/c++/ADL, CPOs, Taxonomy Summary.md",sourceDirName:"c++",slug:"/c++/ADL, CPOs, Taxonomy Summary",permalink:"/docs/c++/ADL, CPOs, Taxonomy Summary",editUrl:"https://github.com/SAtacker/satacker.github.io/edit/main/docs/docs/c++/ADL, CPOs, Taxonomy Summary.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Congratulations!",permalink:"/docs/tutorial-basics/congratulations"},next:{title:"Summary of ADL, CPOs, Taxonomy",permalink:"/docs/c++/CPOs and tag_invokes"}},s=[{value:"Why ADL?",id:"why-adl",children:[]},{value:"Name Texonomy",id:"name-texonomy",children:[]}],m={toc:s};function p(e){var t=e.components,n=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"summary-of-adl-cpos-taxonomy"},"Summary of ADL, CPOs, Taxonomy"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://www.youtube.com/watch?v=u1iewQYkYGE"},"CppCon 2019: Kostas Kyrimis ADL: introduction in name taxonomy, customization points and use cases"))),(0,a.kt)("h2",{id:"why-adl"},"Why ADL?"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},'#include <iostream>\n\nint main(){\n    std::operator<<(std::cout,"Hello World\\n");\n    std::cout<<"Hello World\\n";      // Without ADL this is invalid\n}\n')),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Witout ADL we would not be able to utilize the operator overload"),(0,a.kt)("li",{parentName:"ul"},"Non member functions (that are part of the interface of a specific type)"),(0,a.kt)("li",{parentName:"ul"},"Templates (2 phase lookup)"),(0,a.kt)("li",{parentName:"ul"},"Unconstrained templates are often the source of very weird errors (ADL Bias)")),(0,a.kt)("h2",{id:"name-texonomy"},"Name Texonomy"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},'The process of looking up a "name" is name taxonomy'),(0,a.kt)("li",{parentName:"ul"},"Name is either qualified or unqualified and if it's a template, then it can be dependent or non-dependent")))}p.isMDXComponent=!0}}]);