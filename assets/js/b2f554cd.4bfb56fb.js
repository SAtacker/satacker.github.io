"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[1477],{10:e=>{e.exports=JSON.parse('{"blogPosts":[{"id":"dbus-crossc","metadata":{"permalink":"/blog/dbus-crossc","editUrl":"https://github.comSAtacker/satacker.github.io/edit/main/blog/blog/2021-06-23-dbus-crossc.mdx","source":"@site/blog/2021-06-23-dbus-crossc.mdx","title":"DBus Cross-compilation","description":"I have made a curated content on DBus cross-compilation on Ubuntu 20.04","date":"2021-06-23T00:00:00.000Z","formattedDate":"June 23, 2021","tags":[{"label":"dbus","permalink":"/blog/tags/dbus"},{"label":"linux","permalink":"/blog/tags/linux"},{"label":"ipc","permalink":"/blog/tags/ipc"},{"label":"beagle","permalink":"/blog/tags/beagle"}],"readingTime":1.56,"hasTruncateMarker":true,"authors":[{"name":"Shreyas Atre","title":"RI at STE||AR Group (Louisiana State University), Maintainer of WasmEdge PySDK & Install Script","url":"https://github.com/SAtacker","imageURL":"https://github.com/SAtacker.png","key":"SAtacker"}],"frontMatter":{"slug":"dbus-crossc","title":"DBus Cross-compilation","authors":["SAtacker"],"tags":["dbus","linux","ipc","beagle"]},"nextItem":{"title":"Hello","permalink":"/blog/hello-world"}},"content":"I have made a curated content on DBus cross-compilation on Ubuntu 20.04\\n\\n\x3c!-- truncate --\x3e\\n\\n## Cross-compilation tools\\n\\n* Go through the best guide [here](https://www.reddit.com/r/BeagleBone/comments/du4lwb/guide_cross_compiling_for_the_beaglebone_black_on/)\\n\\n```\\ngcc-arm-linux-gnueabi:\\n  Installed: (none)\\n  Candidate: 4:9.3.0-1ubuntu2\\n  Version table:\\n     4:9.3.0-1ubuntu2 500\\n        500 http://in.archive.ubuntu.com/ubuntu focal/universe amd64 Packages\\n\\nbinutils-arm-linux-gnueabi:\\n  Installed: 2.34-6ubuntu1.1\\n  Candidate: 2.34-6ubuntu1.1\\n  Version table:\\n *** 2.34-6ubuntu1.1 500\\n        500 http://in.archive.ubuntu.com/ubuntu focal-updates/universe amd64 Packages\\n        500 http://security.ubuntu.com/ubuntu focal-security/universe amd64 Packages\\n        100 /var/lib/dpkg/status\\n     2.34-6ubuntu1 500\\n        500 http://in.archive.ubuntu.com/ubuntu focal/universe amd64 Packages\\n\\n```\\n\\n\\n## Installing DBus for `arm-linux-gnueabi`\\n\\n* Note: The low-level libdbus reference library has no required dependencies; the reference bus daemon\'s only required dependency is an XML parser (expat).\\n\\n### 1. Installing `expat`\\n\\n* Currently `expat 2.4.1` is stable\\n* Download `expat 2.4.1` and `tar xvfz expat-2.4.1.tar.gz`\\n* Configure expat\\n\\n```sh\\n./configure  --without-tests --without-examples --prefix=/usr/arm-linux-gnueabi/ --host=arm-linux-gnueabi CC=/usr/bin/arm-linux-gnueabi-gcc-8 CXX=/usr/bin/arm-linux-gnueabi-g++-8\\nmake -j8\\nsudo make install\\n```\\n\\n### 2. Installing `libdbus`\\n\\n* Once completed download `dbus` from [here](https://dbus.freedesktop.org/releases/dbus/)\\n* Currently `1.12.x` are the stable ones\\n* `tar xvfz dbus-1.12.20.tar.gz`\\n\\n```sh\\n./configure --disable-doxygen-docs --disable-xml-docs --exec-prefix=/usr/arm-linux-gnueabi --host=arm-linux-gnueabi CC=/usr/bin/arm-linux-gnueabi-gcc-8 CXX=/usr/bin/arm-linux-gnueabi-g++-8 CFLAGS=-I/usr/arm-linux-gnueabi/include LDFLAGS=-L/usr/arm-linux-gnueabi/lib/ LIBS=-lexpat\\nmake -j8\\nsudo make install\\n```\\n\\n## Other Useful Links\\n\\n* DBus with Connman - [Link](https://gist.github.com/tranthamp/2721326)\\n\\n\x3c!-- GIST --\x3e\\n\\n```sh\\n# Connman Technology API examples: (Object Path: /net/connman/technology/<wifi/ethernet>, Interface: net.connman.Technology)\\n# GetProperties\\ndbus-send --system --dest=net.connman --print-reply /net/connman/technology/wifi net.connman.Technology.GetProperties\\n\\n# Scan\\ndbus-send --system --dest=net.connman --print-reply /net/connman/technology/wifi net.connman.Technology.Scan\\n\\n# Disable/Enable wifi\\ndbus-send --system --dest=net.connman --print-reply /net/connman/technology/wifi net.connman.Technology.SetProperty string:Powered variant:boolean:true\\n\\n# Disable/Enable ethernet\\ndbus-send --system --dest=net.connman --print-reply /net/connman/technology/ethernet net.connman.Technology.SetProperty string:Powered variant:boolean:true\\n\\n# Connman Manager API examples: (Object Path: /, Interface: net.connman.Manager)\\ndbus-send --system --dest=net.connman --print-reply / net.connman.Manager.GetProperties\\ndbus-send --system --dest=net.connman --print-reply / net.connman.Manager.GetTechnologies\\ndbus-send --system --dest=net.connman --print-reply / net.connman.Manager.GetServices\\n\\n# See: http://git.kernel.org/?p=network/connman/connman.git;a=tree;f=doc;hb=HEAD\\n```\\n\\n\x3c!-- /GIST --\x3e\\n\\n:::info\\n* The best way to get to know dbus is from their own tutorial [here](https://dbus.freedesktop.org/doc/dbus-tutorial.html).\\n* [This](https://github.com/makercrew/dbus-sample) has done a great job of giving an overview of the API to get yourself quickly started.\\n\\n\\nimport Comments from \'../src/components/comments/Comments\'\\n\\n----\\n<Comments />\\n----"},{"id":"hello-world","metadata":{"permalink":"/blog/hello-world","editUrl":"https://github.comSAtacker/satacker.github.io/edit/main/blog/blog/2021-06-08-hello-world.mdx","source":"@site/blog/2021-06-08-hello-world.mdx","title":"Hello","description":"Welcome to this blog. This blog is created with Docusaurus 2 alpha.","date":"2021-06-08T00:00:00.000Z","formattedDate":"June 8, 2021","tags":[{"label":"hello","permalink":"/blog/tags/hello"},{"label":"docusaurus","permalink":"/blog/tags/docusaurus"}],"readingTime":0.16,"hasTruncateMarker":true,"authors":[{"name":"Shreyas Atre","title":"RI at STE||AR Group (Louisiana State University), Maintainer of WasmEdge PySDK & Install Script","url":"https://github.com/SAtacker","imageURL":"https://github.com/SAtacker.png","key":"SAtacker"}],"frontMatter":{"slug":"hello-world","title":"Hello","authors":["SAtacker"],"tags":["hello","docusaurus"]},"prevItem":{"title":"DBus Cross-compilation","permalink":"/blog/dbus-crossc"},"nextItem":{"title":"Pre-Coding Period","permalink":"/blog/pre-coding"}},"content":"Welcome to this blog. This blog is created with [**Docusaurus 2 alpha**](https://docusaurus.io/).\\n\\n\x3c!--truncate--\x3e\\n\\nThis is a test post.\\n\\nA whole bunch of other information.\\n\\nimport Comments from \'../src/components/comments/Comments\'\\n\\n----\\n<Comments />\\n----"},{"id":"pre-coding","metadata":{"permalink":"/blog/pre-coding","editUrl":"https://github.comSAtacker/satacker.github.io/edit/main/blog/blog/2021-04-21-pre-coding.mdx","source":"@site/blog/2021-04-21-pre-coding.mdx","title":"Pre-Coding Period","description":"Points to note","date":"2021-04-21T00:00:00.000Z","formattedDate":"April 21, 2021","tags":[{"label":"gsoc","permalink":"/blog/tags/gsoc"},{"label":"beagle-config","permalink":"/blog/tags/beagle-config"}],"readingTime":2.19,"hasTruncateMarker":true,"authors":[{"name":"Shreyas Atre","title":"RI at STE||AR Group (Louisiana State University), Maintainer of WasmEdge PySDK & Install Script","url":"https://github.com/SAtacker","imageURL":"https://github.com/SAtacker.png","key":"SAtacker"}],"frontMatter":{"slug":"pre-coding","title":"Pre-Coding Period","authors":["SAtacker"],"tags":["gsoc","beagle-config"]},"prevItem":{"title":"Hello","permalink":"/blog/hello-world"},"nextItem":{"title":"Beaglebone & Linux","permalink":"/blog/linux_beagle"}},"content":"### Points to note\\n- Interface Namings\\n  - It is of my knowledge that the USB CDC ECM class interfaces are Predictable [source 1](https://cgit.freedesktop.org/systemd/systemd/tree/src/udev/udev-builtin-net_id.c##n20), [source 2](https://www.freedesktop.org/wiki/Software/systemd/PredictableNetworkInterfaceNames/)\\n  - Windows vs Unix Like \\n\x3c!--truncate--\x3e\\n\\n### Disclaimer\\n\\nCurrently, it\'s the review period till May 17th. I have started looking at some basic points I need to make concrete decisions about as I go ahead. Even if my selection does not happen due to misfortune these readings will only benefit next time or whoever carries it on.\\n\\n### The Why Section\\n1. Interface namings are necessary to let the (Host Application) beagle-config know which one is the beagle device. After getting to know the interface name system calls to set rules in iptables can be executed. This would completely eliminate any CLI usage. Basically, users would have to just plugin the beagle device and everything will be taken care of. (Note - This is just the beginning)\\n\\n### The How Section\\n1. \\n * High-Level overview - Since Udev rules decide the interface name in Linux it would just be of the sort `enx78e7d1ea46da` which is essentially incorporating the MAC address of the beagle device. On windows there\'s just usual ICS without lowlevel configurations.\\n * Low-Level Windows - A simple PowerShell script could do it\\n A simple PowerShell script from [here](https://superuser.com/questions/470319/how-to-enable-internet-connection-sharing-using-command-line) could do it.\\n\\n```\\n # Register the HNetCfg library (once)\\nregsvr32 hnetcfg.dll\\n\\n# Create a NetSharingManager object\\n$m = New-Object -ComObject HNetCfg.HNetShare\\n\\n# List connections\\n$m.EnumEveryConnection |% { $m.NetConnectionProps.Invoke($_) }\\n\\n# Find connection\\n$c = $m.EnumEveryConnection |? { $m.NetConnectionProps.Invoke($_).Name -eq \\"Ethernet\\" }\\n\\n# Get sharing configuration\\n$config = $m.INetSharingConfigurationForINetConnection.Invoke($c)\\n\\n# See if sharing is enabled\\nWrite-Output $config.SharingEnabled\\n\\n# See the role of connection in sharing\\n# 0 - public, 1 - private\\n# Only meaningful if SharingEnabled is True\\nWrite-Output $config.SharingType\\n\\n# Enable sharing (0 - public, 1 - private)\\n$config.EnableSharing(0)\\n\\n# Disable sharing\\n$config.DisableSharing()\\n```\\n * Low-Level Linux- We would look for the default ip-address of beagle devices. Get the interface name and then use iptables to set packet filter rules for ICS. \\n \x3c!-- The below script is from [here](https://stackoverflow.com/questions/848040/how-can-i-get-the-interface-name-index-associated-with-a-tcp-socket) --\x3e\\n```\\n// look which interface contains the wanted IP.\\n// When found, ifa->ifa_name contains the name of the interface (eth0, eth1, ppp0...)\\nfor (ifa = ifaddr; ifa != NULL; ifa = ifa->ifa_next)\\n{\\n    if (ifa->ifa_addr)\\n    {\\n        if (AF_INET == ifa->ifa_addr->sa_family)\\n        {\\n            struct sockaddr_in* inaddr = (struct sockaddr_in*)ifa->ifa_addr;\\n\\n            if (inaddr->sin_addr.s_addr == addr.sin_addr.s_addr)\\n            {\\n                if (ifa->ifa_name)\\n                {\\n                    // Found it\\n                }\\n            }\\n        }\\n    }\\n}\\nfreeifaddrs(ifaddr);\\n```\\n\\n* Further things would be added as the time flows and exams are over till May Mid.\\n\\nimport Comments from \'../src/components/comments/Comments\'\\n\\n----\\n<Comments />\\n----"},{"id":"linux_beagle","metadata":{"permalink":"/blog/linux_beagle","editUrl":"https://github.comSAtacker/satacker.github.io/edit/main/blog/blog/2021-01-29-linux_beagle.mdx","source":"@site/blog/2021-01-29-linux_beagle.mdx","title":"Beaglebone & Linux","description":"I have made a curated content on linux and beaglebone","date":"2021-01-29T00:00:00.000Z","formattedDate":"January 29, 2021","tags":[{"label":"beagle","permalink":"/blog/tags/beagle"},{"label":"linux","permalink":"/blog/tags/linux"}],"readingTime":5.505,"hasTruncateMarker":true,"authors":[{"name":"Shreyas Atre","title":"RI at STE||AR Group (Louisiana State University), Maintainer of WasmEdge PySDK & Install Script","url":"https://github.com/SAtacker","imageURL":"https://github.com/SAtacker.png","key":"SAtacker"}],"frontMatter":{"slug":"linux_beagle","title":"Beaglebone & Linux","authors":["SAtacker"],"tags":["beagle","linux"]},"prevItem":{"title":"Pre-Coding Period","permalink":"/blog/pre-coding"}},"content":"I have made a curated content on linux and beaglebone\\n\\n\x3c!-- truncate --\x3e\\n\\n## Boot\\n\\nPower On\\n\\n1. (First Stage bootloader) TI Boot ROM performs minimal congfig, finds boot image and loads x-loader\\n\\n   - This bootloader initializes a minimal amount of CPU and board hardware, then accesses the first partition of the SD card (which must be in FAT format), and loads a file called \\"MLO\\", and executes it.\\n\\n2. (Second Stage bootloader) MLO \\"Mmc LOader\\" on the FAT partition is the second stage bootloader\\n\\n   - Sets up pin muxing initializes clocks and memory and loads U boot\\n\\n3. (Third Stage ) U-Boot is Das-Universal Boot , u-boot.img on FAT\\n\\n   - Specifies root file system and uses uEnv.txt config , performs additional inits, loads Linux Kernel and passes control\\n   - The uenvcmd from uEnv.txt file is executed.\\n   - The file /dtbs/am335x\u2010bone*device_name*.dtb is read in. This file contains the BBB\u2019s compiled device tree description, which is discussed shortly. After this description is read in, the flattened device tree blob is placed in memory at the address 0x815f0000\\n\\n4. Linux Kernel (EXT4 partition on SD card)\\n   - Decompresses kernel into memory and sets up I2C , USB, etc. and mounts file system containing linux applications i.e mounts the root file system ( mmcroot and mmcrootfstype are defined in uEnv.txt )\\n   - Calls userspace process init\\n\\n## Kernel Space and User Space\\n\\n- Kernel space is the area of system memory where Linux kernel runs and is separated from user space to provide better security and helps to avoid crashing due to badly written user code.\\n\\n```\\n    ---------------------------------------------\\n    |               User space                  |\\n    |  /sbin/init UserCode LinuxConsole         |\\n    |            GNU C lib (glib)               |\\n    ---------------------------------------------\\n                        ||\\n                        \\\\/\\n                    Kernel space\\n                        ||\\n                        \\\\/\\n                    Hardware & Devices\\n```\\n\\n- A kernel module is an object file that contains code, which can be loaded and unloaded from the kernel on demand. In many cases the kernel can even load and unload modules while it is executing, without needing to reboot the BBB.\\n- Example : When we add wifi module it uses LKM (loadable kernel module)\\n- Further kernel services are made available through system calls\\n- System V init or systemd manages these systems and services, can be used to start and stop them\\n\\n### Init process\\n\\n- Begins by reading config from /etc/inittab which defines runlevel\\n- Runlevel defines the state of device and controls which process and services are started by init\\n- In debian there are several runlevels from 0-6 \\n\\n```\\nsatacker@ubuntu:~/Desktop/beagle_notes$ who -r\\n         run-level 5  2021-01-14 22:00\\nsatacker@ubuntu:~/Desktop/beagle_notes$ runlevel\\nN 5\\nsatacker@ubuntu:/etc$ ls -d rc*\\nrc0.d  rc1.d  rc2.d  rc3.d  rc4.d  rc5.d  rc6.d  rcS.d\\n```\\n\\n## Linux System Management\\n\\nHere we see the full administrative control.\\n\\n### Super user\\n\\n- The root account or superuser has access to all the commands and files\\n- `sudo` stands for superuser-do\\n- For ex. Not using `sudo` prevents from accedentally deleting files\\n\\n### File System\\n\\n- File system is a hierarchy of directories\\n- Uses `inodes` to represent the file system objects such as files and directories themselves\\n- For ex. when an extended file system is created (ext3/ext4) on a physical disk an inode table is created. The table links to an inode data structure for each file and directory on that disk\\n\\n```\\ndebian@beaglebone:~/ws$ ls -ail\\ntotal 268\\n   26 drwxr-xr-x 2 debian debian   4096 Jan 29 01:12 .\\n44132 drwxr-xr-x 6 debian debian   4096 Jan 28 23:53 ..\\n 2434 -rwxr-xr-x 1 debian debian   3732 Jan 29 01:04 a.pru0\\n  827 -rwxr-xr-x 1 debian debian    504 Nov 13 03:32 init_script.sh\\n 1244 -rw-r--r-- 1 debian debian    512 Jan 29 00:59 pru_ex_calculator.sim\\n  958 -rw-r--r-- 1 debian debian    100 Jan 29 00:57 pru_ex_counter.sim\\n 1020 -rw-r--r-- 1 debian debian    119 Jan 29 01:04 pru_ex.sim\\n  916 -rw-r--r-- 1 debian debian 245510 Aug 25 01:55 simppru-1.3-armhf.deb\\n```\\n\\n- `drwxr-xr-x` where `d` represents directory , could have been `l` for symlink and `-` for regualar file, `c` for character special, `b` for block special, `p` for fifo and `s` for socket. The rest `rwxr-xr-x` represents file system permissions namely `r`ead, `w`rite and e`x`ecute.\\n- Weightings - r = 4 , w = 2 , x = 1 i.e. `rwxrwxrwx` corresponds to 777\\n\\n### Linking to files and dirs\\n\\n- A soft link refers to location of another file/directory\\n- ex. \\n```debian@beaglebone:/usr/local/bin$ ls\\npyctrl_start_server  simppru      simppru-console\\npyctrl_stop_server   simppru-1.3  simppru-console-1.3\\n``` \\nall the simppru refer to the same binary \\n- This can be verified as follows\\n\\n```\\ndebian@beaglebone:/usr/local/bin$ ls -l\\ntotal 792\\n-rwxr-xr-x 1 root root    190 Apr  6  2020 pyctrl_start_server\\n-rwxr-xr-x 1 root root    188 Apr  6  2020 pyctrl_stop_server\\nlrwxrwxrwx 1 root root     11 Aug 25 01:55 simppru -> simppru-1.3\\n-rwxr-xr-x 1 root root 118996 Aug 25 01:53 simppru-1.3\\nlrwxrwxrwx 1 root root     19 Aug 25 01:55 simppru-console -> simppru-console-1.3\\n-rwxr-xr-x 1 root root 677248 Aug 25 01:54 simppru-console-1.3\\n```\\n\\n- Hardlinks refer to the inode of the file , always refer to the source even if the file is removed\\n\\n```\\nsatacker@ubuntu:~/Desktop$ cat test.test \\nHello!\\nsatacker@ubuntu:~/Desktop$ cat temp_hard_link \\nHello!\\nsatacker@ubuntu:~/Desktop$ \\n```\\n\\n```\\nsatacker@ubuntu:~/Desktop$ ls -ail | grep \\"test\\\\|temp_\\" \\n4202899 -rw-rw-r--  2 satacker satacker    0 Jan 29 10:38 temp_hard_link\\n4202899 -rw-rw-r--  2 satacker satacker    0 Jan 29 10:38 test.test\\n```\\nAfter removing\\n```\\nsatacker@ubuntu:~/Desktop$ rm test.test \\nsatacker@ubuntu:~/Desktop$ ls -ail | grep \\"test\\\\|temp_\\" \\n4202899 -rw-rw-r--  1 satacker satacker    0 Jan 29 10:38 temp_hard_link\\nsatacker@ubuntu:~/Desktop$ cat temp_hard_link \\nHello!\\nsatacker@ubuntu:~/Desktop$\\n```\\nFrom [wikipedia](https://en.wikipedia.org/wiki/Hard_link)\\n![Wikipedia](https://upload.wikimedia.org/wikipedia/commons/3/32/Hard_Link_Illustration.svg)\\n\\n### Users and Groups\\n\\nTODO\\n\\n### Commands\\n\\nTOD\\n\\n### Processes\\n\\n- `ps` lists the processes that are currently running\\n\\n```\\nsatacker@ubuntu:~/Desktop$ ps ax | grep bash\\n   2331 pts/0    Ss+    0:00 bash\\n   5458 pts/2    Ss     0:00 bash\\n  23896 pts/2    S+     0:00 grep --color=auto bash\\n```\\n\\n- We can kill the process using `kill` and then the PID from above. `pkill` allows to kill the process by name.\\n- Processes can be made background , ex. `command &` the & followed by command makes it a background process.\\n- If a foreground process is taking too much time, stop it by pressing Ctrl+Z. A stopped job still exists, but its execution is suspended. To resume the job, but in the background, type `bg` to send the stopped job to background execution. \\n- Linux from the shell supports just one active foreground process per virtual terminal. However, from the practical perspective of the user, a windowed environment (e.g., Linux with a desktop, not from a text-based shell) supports several active windows that effectively serve as multiple simultaneous foreground processes. In practice, Linux behind-the-scenes adjusts the priority of processes in a GUI to promote system stability and support end-user processing. [Source](https://www.lifewire.com/multitasking-background-foreground-process-2180219)\\n\\nimport Comments from \'../src/components/comments/Comments\'\\n\\n----\\n<Comments />\\n----"}]}')}}]);