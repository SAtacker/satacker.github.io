"use strict";(self.webpackChunkgsoc_blog=self.webpackChunkgsoc_blog||[]).push([[7225],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return d}});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),s=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=s(e.components);return r.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,c=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),m=s(n),d=a,h=m["".concat(c,".").concat(d)]||m[d]||p[d]||i;return n?r.createElement(h,o(o({ref:t},u),{},{components:n})):r.createElement(h,o({ref:t},u))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=m;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var s=2;s<i;s++)o[s]=n[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},93951:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return c},metadata:function(){return s},toc:function(){return u},default:function(){return m}});var r=n(87462),a=n(63366),i=(n(67294),n(3905)),o=["components"],l={sidebar_position:1},c="GSoC @ HPX, STE||AR Group",s={unversionedId:"c++/GSoC-HPX",id:"c++/GSoC-HPX",isDocsHomePage:!1,title:"GSoC @ HPX, STE||AR Group",description:"- GSoC Project Acceptance Page",source:"@site/docs/c++/GSoC-HPX.md",sourceDirName:"c++",slug:"/c++/GSoC-HPX",permalink:"/docs/c++/GSoC-HPX",editUrl:"https://github.com/SAtacker/satacker.github.io/edit/main/docs/docs/c++/GSoC-HPX.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Congratulations!",permalink:"/docs/tutorial-basics/congratulations"},next:{title:"flex",permalink:"/docs/quick-ftxui/flex"}},u=[{value:"Abstract",id:"abstract",children:[]},{value:"Brief Summary",id:"brief-summary",children:[]},{value:"Work",id:"work",children:[]},{value:"References",id:"references",children:[]}],p={toc:u};function m(e){var t=e.components,n=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"gsoc--hpx-stear-group"},"GSoC @ HPX, STE||AR Group"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://summerofcode.withgoogle.com/programs/2022/projects/YXhhTBJw"},"GSoC Project Acceptance Page")),(0,i.kt)("li",{parentName:"ul"},"Project Title: Coroutine-like interface")),(0,i.kt)("p",null,"Mentors (STE||AR Group @ LSU)"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Dr. Hartmut Kaiser, Adjunct Professor @ LSU"),(0,i.kt)("li",{parentName:"ol"},"Giannis Gonidelis, RA @ LSU")),(0,i.kt)("h2",{id:"abstract"},"Abstract"),(0,i.kt)("p",null,"HPX being up to date with Std C++ Proposals, Senders/Receivers were implemented as per P2300. But they have been missing coroutine (co_await) integration and minor functionalities as described in P2300 which is likely to be accepted. Hence I plan to implement these functionalities within the Core HPX Library. "),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Benefits: ",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Coroutines introduce better async code. For example, it is more readable, local variables have the same lifespan as the coroutine which means we don\u2019t need to worry about allocation/release. "),(0,i.kt)("li",{parentName:"ul"},"S/R algorithms can work with coroutines which they cannot as of now unless relied on futures which as mentioned are single-time use. "),(0,i.kt)("li",{parentName:"ul"},"Adding co_await support makes the code more structured with respect to concurrency which can also be done by library abstractions of callbacks but using co_await may make it more optimized.")))),(0,i.kt)("h2",{id:"brief-summary"},"Brief Summary"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Senders, and Receivers"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Because it makes a more consistent programming model considering async programming types i.e. Parallelism and Concurrency. It standardizes the terminologies and execution policies which are more generic and reduce redundancy."),(0,i.kt)("li",{parentName:"ul"},"Coroutines have a direct connection between Senders and Coroutine Awaitables."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Futures"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"One of the points of S/R is to avoid the allocations associated with futures, also, futures are single-use, whereas S/R, in general, can be used (started) multiple times. - Dr. H. Kaiser")))),(0,i.kt)("p",null,"Goal is to enable all Sender CPOs to do the following:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"If we write a sender and pass it to a function which could be a coroutine that could co_await that sender and get its result."),(0,i.kt)("li",{parentName:"ul"},"If they are not generally awaitable then we can await transform them (i.e. make them awaitable).")),(0,i.kt)("h2",{id:"work"},"Work"),(0,i.kt)("p",null,"My PRs can be found using ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/STEllAR-GROUP/hpx/pulls?q=is%3Apr+author%3ASAtacker"},"this")," link as it'll always be updated."),(0,i.kt)("p",null,"Following are the Merged PRs until now:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/STEllAR-GROUP/hpx/pull/5846"},"[execution] Add schedule_result_t alias template")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/STEllAR-GROUP/hpx/pull/5865"},"[hpx::execution] Added forwarding_scheduler_query")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/STEllAR-GROUP/hpx/pull/5920"},"[P2300] enhancements: receiver_of, sender_of improvements")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/STEllAR-GROUP/hpx/pull/5945"},"[P2300] Added fundamental coroutine_traits for S/R"))),(0,i.kt)("p",null,"With coroutine traits completed, my remaining work is the following:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Adapt ",(0,i.kt)("inlineCode",{parentName:"li"},"get_completion_signatures")," when Sender is a awaitable"),(0,i.kt)("li",{parentName:"ol"},"Utility ",(0,i.kt)("inlineCode",{parentName:"li"},"as_awaitable_t"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"receiver_base"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"sender_awaitable_base")," "),(0,i.kt)("li",{parentName:"ul"},"to transform an object into one that is awaitable within a particular coroutine."))),(0,i.kt)("li",{parentName:"ol"},"promise base for 5."),(0,i.kt)("li",{parentName:"ol"},"operation base for 5."),(0,i.kt)("li",{parentName:"ol"},"Utility ",(0,i.kt)("inlineCode",{parentName:"li"},"connect_awaitable")," to adapt ",(0,i.kt)("inlineCode",{parentName:"li"},"connect")," mentioned in ",(0,i.kt)("a",{parentName:"li",href:"https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2300r5.html#spec-execution.senders.connect"},"spec")," 2.2"),(0,i.kt)("li",{parentName:"ol"},"Utility ",(0,i.kt)("inlineCode",{parentName:"li"},"with_awaitable_senders"),"  ",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Used as the base class of a coroutine promise type, makes senders awaitable in that coroutine type")))),(0,i.kt)("h2",{id:"references"},"References"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://wg21.link/P2300"},"P2300"))))}m.isMDXComponent=!0}}]);