"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[7225],{3905:(e,t,a)=>{a.d(t,{Zo:()=>u,kt:()=>d});var r=a(7294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},i=Object.keys(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var s=r.createContext({}),c=function(e){var t=r.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},u=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,i=e.originalType,s=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),m=c(a),d=n,h=m["".concat(s,".").concat(d)]||m[d]||p[d]||i;return a?r.createElement(h,l(l({ref:t},u),{},{components:a})):r.createElement(h,l({ref:t},u))}));function d(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=a.length,l=new Array(i);l[0]=m;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:n,l[1]=o;for(var c=2;c<i;c++)l[c]=a[c];return r.createElement.apply(null,l)}return r.createElement.apply(null,a)}m.displayName="MDXCreateElement"},3951:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>p,frontMatter:()=>i,metadata:()=>o,toc:()=>c});var r=a(7462),n=(a(7294),a(3905));const i={sidebar_position:1},l="GSoC @ HPX, STE||AR Group",o={unversionedId:"c++/GSoC-HPX",id:"c++/GSoC-HPX",title:"GSoC @ HPX, STE||AR Group",description:"- GSoC Project Acceptance Page",source:"@site/docs/c++/GSoC-HPX.md",sourceDirName:"c++",slug:"/c++/GSoC-HPX",permalink:"/docs/c++/GSoC-HPX",draft:!1,editUrl:"https://github.com/SAtacker/satacker.github.io/edit/main/docs/docs/c++/GSoC-HPX.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Part 2",permalink:"/docs/linear-algebra/part2"},next:{title:"flex",permalink:"/docs/quick-ftxui/flex"}},s={},c=[{value:"Abstract",id:"abstract",level:2},{value:"Brief Summary",id:"brief-summary",level:2},{value:"Work",id:"work",level:2},{value:"References",id:"references",level:2}],u={toc:c};function p(e){let{components:t,...a}=e;return(0,n.kt)("wrapper",(0,r.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"gsoc--hpx-stear-group"},"GSoC @ HPX, STE||AR Group"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://summerofcode.withgoogle.com/programs/2022/projects/YXhhTBJw"},"GSoC Project Acceptance Page")),(0,n.kt)("li",{parentName:"ul"},"Project Title: Coroutine-like interface")),(0,n.kt)("p",null,"Mentors (STE||AR Group @ LSU)"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"Dr. Hartmut Kaiser, Adjunct Professor @ LSU"),(0,n.kt)("li",{parentName:"ol"},"Giannis Gonidelis, RA @ LSU")),(0,n.kt)("h2",{id:"abstract"},"Abstract"),(0,n.kt)("p",null,"HPX being up to date with Std C++ Proposals, Senders/Receivers were implemented as per P2300. But they have been missing coroutine (co_await) integration and minor functionalities as described in P2300 which is likely to be accepted. Hence I plan to implement these functionalities within the Core HPX Library. "),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Benefits: ",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Coroutines introduce better async code. For example, it is more readable, local variables have the same lifespan as the coroutine which means we don\u2019t need to worry about allocation/release. "),(0,n.kt)("li",{parentName:"ul"},"S/R algorithms can work with coroutines which they cannot as of now unless relied on futures which as mentioned are single-time use. "),(0,n.kt)("li",{parentName:"ul"},"Adding co_await support makes the code more structured with respect to concurrency which can also be done by library abstractions of callbacks but using co_await may make it more optimized.")))),(0,n.kt)("h2",{id:"brief-summary"},"Brief Summary"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"Senders, and Receivers"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Because it makes a more consistent programming model considering async programming types i.e. Parallelism and Concurrency. It standardizes the terminologies and execution policies which are more generic and reduce redundancy."),(0,n.kt)("li",{parentName:"ul"},"Coroutines have a direct connection between Senders and Coroutine Awaitables."))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"Futures"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"One of the points of S/R is to avoid the allocations associated with futures, also, futures are single-use, whereas S/R, in general, can be used (started) multiple times. - Dr. H. Kaiser")))),(0,n.kt)("p",null,"Goal is to enable all Sender CPOs to do the following:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"If we write a sender and pass it to a function which could be a coroutine that could co_await that sender and get its result."),(0,n.kt)("li",{parentName:"ul"},"If they are not generally awaitable then we can await transform them (i.e. make them awaitable).")),(0,n.kt)("h2",{id:"work"},"Work"),(0,n.kt)("p",null,"My PRs can be found using ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/STEllAR-GROUP/hpx/pulls?q=is%3Apr+author%3ASAtacker"},"this")," link as it'll always be updated."),(0,n.kt)("p",null,"Following are the Merged PRs until now:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://github.com/STEllAR-GROUP/hpx/pull/5846"},"[execution] Add schedule_result_t alias template")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://github.com/STEllAR-GROUP/hpx/pull/5865"},"[hpx::execution] Added forwarding_scheduler_query")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://github.com/STEllAR-GROUP/hpx/pull/5920"},"[P2300] enhancements: receiver_of, sender_of improvements")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://github.com/STEllAR-GROUP/hpx/pull/5945"},"[P2300] Added fundamental coroutine_traits for S/R"))),(0,n.kt)("p",null,"With coroutine traits completed, my remaining work is the following:"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"Adapt ",(0,n.kt)("inlineCode",{parentName:"li"},"get_completion_signatures")," when Sender is a awaitable"),(0,n.kt)("li",{parentName:"ol"},"Utility ",(0,n.kt)("inlineCode",{parentName:"li"},"as_awaitable_t"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"receiver_base"),", ",(0,n.kt)("inlineCode",{parentName:"li"},"sender_awaitable_base")," "),(0,n.kt)("li",{parentName:"ul"},"to transform an object into one that is awaitable within a particular coroutine."))),(0,n.kt)("li",{parentName:"ol"},"promise base for 5."),(0,n.kt)("li",{parentName:"ol"},"operation base for 5."),(0,n.kt)("li",{parentName:"ol"},"Utility ",(0,n.kt)("inlineCode",{parentName:"li"},"connect_awaitable")," to adapt ",(0,n.kt)("inlineCode",{parentName:"li"},"connect")," mentioned in ",(0,n.kt)("a",{parentName:"li",href:"https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2300r5.html#spec-execution.senders.connect"},"spec")," 2.2"),(0,n.kt)("li",{parentName:"ol"},"Utility ",(0,n.kt)("inlineCode",{parentName:"li"},"with_awaitable_senders"),"  ",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Used as the base class of a coroutine promise type, makes senders awaitable in that coroutine type")))),(0,n.kt)("h2",{id:"references"},"References"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://wg21.link/P2300"},"P2300"))))}p.isMDXComponent=!0}}]);