"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[1477],{10:e=>{e.exports=JSON.parse('{"blogPosts":[{"id":"basic_source_resources","metadata":{"permalink":"/blog/basic_source_resources","editUrl":"https://github.comSAtacker/satacker.github.io/edit/main/blog/blog/2023-03-19-opensource-resources.mdx","source":"@site/blog/2023-03-19-opensource-resources.mdx","title":"Open Source Resources","description":"Most important","date":"2023-03-19T00:00:00.000Z","formattedDate":"March 19, 2023","tags":[{"label":"GSoC","permalink":"/blog/tags/g-so-c"},{"label":"Open Source","permalink":"/blog/tags/open-source"}],"readingTime":0.11,"hasTruncateMarker":false,"authors":[{"name":"Shreyas Atre","title":"RI at STE||AR Group (Louisiana State University), Maintainer of WasmEdge PySDK & Install Script","url":"https://github.com/SAtacker","imageURL":"https://github.com/SAtacker.png","key":"SAtacker"}],"frontMatter":{"slug":"basic_source_resources","title":"Open Source Resources","authors":["SAtacker"],"tags":["GSoC","Open Source"]},"nextItem":{"title":"Review of basic CoA","permalink":"/blog/basic-coa"}},"content":"## Most important\\n\\n1. [LMGTFY](https://letmegooglethat.com/?q=lmgtfy)\\n\\n## Some links that are good enough\\n\\n2. https://alexfornuto.com/how-to-ask-for-help-on-irc/\\n3. http://www.catb.org/~esr/faqs/smart-questions.html\\n\\nimport Comments from \'../src/components/comments/Comments\'\\n\\n<Comments />"},{"id":"basic-coa","metadata":{"permalink":"/blog/basic-coa","editUrl":"https://github.comSAtacker/satacker.github.io/edit/main/blog/blog/2023-02-03-review-basic-coa.mdx","source":"@site/blog/2023-02-03-review-basic-coa.mdx","title":"Review of basic CoA","description":"I am planning to study new things every week and writing blogs about these occasionally.","date":"2023-02-03T00:00:00.000Z","formattedDate":"February 3, 2023","tags":[{"label":"COA","permalink":"/blog/tags/coa"},{"label":"GPU","permalink":"/blog/tags/gpu"}],"readingTime":3.385,"hasTruncateMarker":false,"authors":[{"name":"Shreyas Atre","title":"RI at STE||AR Group (Louisiana State University), Maintainer of WasmEdge PySDK & Install Script","url":"https://github.com/SAtacker","imageURL":"https://github.com/SAtacker.png","key":"SAtacker"}],"frontMatter":{"slug":"basic-coa","title":"Review of basic CoA","authors":["SAtacker"],"tags":["COA","GPU"]},"prevItem":{"title":"Open Source Resources","permalink":"/blog/basic_source_resources"},"nextItem":{"title":"GSoC 2022 Report","permalink":"/blog/gsoc-2022-work"}},"content":"I am planning to study new things every week and writing blogs about these occasionally.\\n\\n### Week 1\\n\\nCourse link - https://onlinecourses.nptel.ac.in/noc23_cs61\\n\\n## 5 stage RISC pipeline\\n\\n- Fetch (IF = Instruction Fetch)\\n- Decode (ID = Instruction Decode)\\n- Execute (EX = Execute)\\n- Memory (MEM = Memory access)\\n- Write (WB = Register write back)\\n\\nCSIC - \\n\\n```asm\\nMUL addr1 addr2 addr3;\\n```\\n\\nRISC - \\n\\n```asm\\nLOAD R2 addr2; \\nLOAD R3 addr3; \\nMUL R1 R2 R3; \\nSTORE addr1 R1;\\n```\\n\\nMore number of instructions for RISC implies that more instructions are to be kept in memory. On the other hand, less transistors are required\\nto build RISC and has more physical space on chip.\\n\\n<p>\\n<a href=\\"https://commons.wikimedia.org/wiki/File:Fivestagespipeline.png#/media/File:Fivestagespipeline.png\\">\\n\\t<img src=\\"https://upload.wikimedia.org/wikipedia/commons/2/21/Fivestagespipeline.png\\" alt=\\"Fivestagespipeline.png\\"> \\n\\t</img>\\n</a>\\n<br></br>\\n<a href=\\"http://creativecommons.org/licenses/by-sa/3.0/\\" title=\\"Creative Commons Attribution-Share Alike 3.0\\">CC BY-SA 3.0</a>,\\n<a href=\\"https://commons.wikimedia.org/w/index.php?curid=140179\\">Link</a>\\n</p>\\n\\nAll instructions execute uniform in temporal space (eg. in one clock cycle), these instructions can be pipelined.\\n\\n\\n### Pipeline Hazards\\n\\n- Structural hazards: multiple instructions compete for the same resource\\n- Data hazards: a dependent instruction cannot proceed because it needs a value that hasn\u2019t been produced\\n- Control hazards: the next instruction cannot be fetched because the outcome of an earlier branch is unknown\\n\\n## Data path\\n\\n## Locality\\n\\n- Temporal\\n\\n```\\nIf at one point a particular memory location is referenced, then it is likely that the same location will be referenced again in the near future. There is temporal proximity between adjacent references to the same memory location. In this case it is common to make efforts to store a copy of the referenced data in faster memory storage, to reduce the latency of subsequent references. Temporal locality is a special case of spatial locality (see below), namely when the prospective location is identical to the present location.\\n```\\n\\n- Spatial\\n\\n```\\nIf a particular storage location is referenced at a particular time, then it is likely that nearby memory locations will be referenced in the near future. In this case it is common to attempt to guess the size and shape of the area around the current reference for which it is worthwhile to prepare faster access for subsequent reference.\\n```\\n\\n- Branch\\n\\n```\\nIf there are only a few possible alternatives for the prospective part of the path in the spatial-temporal coordinate space. This is the case when an instruction loop has a simple structure, or the possible outcome of a small system of conditional branching instructions is restricted to a small set of possibilities. Branch locality is typically not spatial locality since the few possibilities can be located far away from each other.\\n```\\n\\n- Equidistant\\n\\n```\\nHalfway between spatial locality and branch locality. Consider a loop accessing locations in an equidistant pattern, i.e., the path in the spatial-temporal coordinate space is a dotted line. In this case, a simple linear function can predict which location will be accessed in the near future.\\n```\\n\\n- [Source](https://en.wikipedia.org/wiki/Locality_of_reference)\\n\\n## Cache mapping\\n\\nCaches are divided into blocks, which may be of various sizes.\\n- The number of blocks in a cache is usually a power of 2.\\n\\n### Where should we put data in the cache?\\n\\n#### Direct-mapped cache\\n\\nEach main memory address maps to exactly one cache block.\\nIdea - is to use the mod (remainder) operator.\\nExample - If the cache contains 2^k blocks, then the data at memory address i would go to cache block index i mod 2^k.\\nFor instance, with the four-block cache (assuming 1 byte block size and 16 byte main memory), address 14 would map to cache block 2. // 14 mod 4 = 2\\n\\n#### least-significant bits\\n\\nIdea - look at the least significant k bits of the address\\nExample - (assuming 1 byte block size and 16 byte main memory) address 14 (1110 in binary) maps to cache block 2 (10 in binary).\\n\\nNote - Taking the least k bits of a binary value is the same as computing that value mod 2^k\\n\\n## Additional resources\\n1. https://cs.stanford.edu/people/eroberts/courses/soco/projects/risc/risccisc/\\n2. https://www.cise.ufl.edu/~mssz/CompOrg/CDA-proc.html\\n\\n\\nimport Comments from \'../src/components/comments/Comments\'\\n\\n----\\n<Comments />\\n----"},{"id":"gsoc-2022-work","metadata":{"permalink":"/blog/gsoc-2022-work","editUrl":"https://github.comSAtacker/satacker.github.io/edit/main/blog/blog/2022-01-13-gsoc-2022-work.mdx","source":"@site/blog/2022-01-13-gsoc-2022-work.mdx","title":"GSoC 2022 Report","description":"1. GSoC 2022 Report","date":"2022-01-13T00:00:00.000Z","formattedDate":"January 13, 2022","tags":[{"label":"GSoC","permalink":"/blog/tags/g-so-c"},{"label":"C++","permalink":"/blog/tags/c"},{"label":"HPX","permalink":"/blog/tags/hpx"}],"readingTime":6.84,"hasTruncateMarker":true,"authors":[{"name":"Shreyas Atre","title":"RI at STE||AR Group (Louisiana State University), Maintainer of WasmEdge PySDK & Install Script","url":"https://github.com/SAtacker","imageURL":"https://github.com/SAtacker.png","key":"SAtacker"}],"frontMatter":{"slug":"gsoc-2022-work","title":"GSoC 2022 Report","authors":["SAtacker"],"tags":["GSoC","C++","HPX"]},"prevItem":{"title":"Review of basic CoA","permalink":"/blog/basic-coa"},"nextItem":{"title":"DBus Cross-compilation","permalink":"/blog/dbus-crossc"}},"content":"##  1. GSoC 2022 Report\\n\\n<div align=\\"center\\">\\n<img height=\\"70%\\" width=\\"70%\\" src=\\"https://developers.google.com/open-source/gsoc/resources/downloads/GSoC-Horizontal.png\\" alt=\\"GSoC @ HPX, STE||AR Group banner\\" />\\n<img src=\\"https://raw.githubusercontent.com/STEllAR-GROUP/hpx/master/docs/sphinx/_static/images/HPX_STELLAR.png\\" alt=\\"GSoC @ HPX, STE||AR Group banner\\" />\\n</div>\\n\\n\x3c!--truncate--\x3e\\n\\n##  2. About the project\\n\\n[GSoC Project Acceptance Page](https://summerofcode.withgoogle.com/programs/2022/projects/YXhhTBJw)\\n\\nMentors\\n  - Dr. Hartmut Kaiser\\n  - Giannis Gonidelis\\n\\n##  3. Objective\\n\\nThe main objective of this project was to enable the usage of co_await or to simplify - enable the usage of coroutines with the latest specs of Senders and receivers.\\n\\n##  4. Abstract\\n\\nHPX being up to date with Std C++ Proposals, Senders/Receivers were implemented as per P2300. But they have been missing coroutine (co_await) integration and minor functionalities as described in P2300 which is likely to be accepted. Hence I plan to implement these functionalities within the Core HPX Library. \\n- Benefits: \\n    - Coroutines introduce better async code. For example, it is more readable, local variables have the same lifespan as the coroutine which means we don\u2019t need to worry about allocation/release. \\n    - S/R algorithms can work with coroutines which they cannot as of now unless relied on futures which as mentioned are single-time use. \\n    - Adding co_await support makes the code more structured with respect to concurrency which can also be done by library abstractions of callbacks but using co_await may make it more optimized.\\n\\n\\n##  5. Brief Summary\\n\\n- Senders, and Receivers\\n    - Because it makes a more consistent programming model considering async programming types i.e. Parallelism and Concurrency. It standardizes the terminologies and execution policies which are more generic and reduce redundancy.\\n    - Coroutines have a direct connection between Senders and Coroutine Awaitables.\\n    - If you are familiar with Eric\'s [talk on live senders/receivers](https://www.youtube.com/watch?v=xiaqNvqRB2E), you might be comfortable watching [these diagrams](https://viewer.diagrams.net/?tags=%7B%7D&highlight=000000&edit=_blank&layers=1&nav=1&page-id=N1fN19OSE8Ezd9pb87vr&title=sender_receiver#R%3Cmxfile%3E%3Cdiagram%20id%3D%22EqYSzL36J7Lu1Ck5oe2v%22%20name%3D%22Page-1%22%3E5VrBcps6FP0az7SLZpAEGC8TN2kX7XttPXkvXSogA42MPEKuTb%2B%2BIohgIeLSsY1os7HRRULi3HOuriQmaL7aveN4nXxkEaET6ES7CXo7gRAgN5B%2FpaWoLIGDKkPM00hVagyL9AdRRkdZN2lEcq2iYIyKdK0bQ5ZlJBSaDXPOtnq1JaN6r2scE8OwCDE1rf%2BnkUjUW8BpY39P0jipewb%2BrLqzwnVl9SZ5giO23TOh6wmac8ZEdbXazQktwatxqdrdPHP3aWCcZKJPgyW6W37%2BTxBSxPz%2B07dbim9v3nhqbKKoX5hE8v1VkXGRsJhlmF431ivONllEyqc6stTU%2BcDYWhqBNH4jQhTKmXgjmDQlYkXVXTlgXtyV7S%2B8uvhVPe6x8HanlQpVqsZaDvBZCJQpZxsekgPvXVMJ85iIA%2FXgk6MkwwlbETke2Y4TikX6XR8HVlSLn%2Bo13pAXyiG%2F4Rz13O%2BYblRPizAh0YYSfpGrq1evDQ82%2FinB3iapIIs1foRjK0Wq%2B0J1Qbggu8OomiioBshXYlASB55i%2FLYRDKhVkOyJxXfOBZxrldZAI3XD8fPTGvakNbDKa2jymkjouX0me67GZDjrYLLrm0wOzsXkWjZ7WNmg9gkpivpSdGaTosiA%2Fd814bJjlknzQmBBrLMVOo7GVreLrYPGXddA7QsJiXSWlLZPZe9X9%2BVVXF69mrNMpNlGYXozx5Te4%2FDhtVnVOtJAB7ozLHgdQJ8tLNQDGniC26Xibu96b3qTpWZ2Kwv15NbketYmRb9nxLEacHxDOpd5kYVlVzRmPBXJyroMkKvrYGo90QusyMA%2Bpac9Ke3bpPTUoPRI0jwwGxuPZ2OFynPGBhWwu2Vhb20H%2Bi7uXJuiB74N99iAGR0Js2r6iaVyiE1S77eS%2BraQqnGpVi1nPQ3jCP%2BZi%2FO52lpt%2B1VGFaG7IRecPZA5o4xLS8ay0rnLlNKWCdM0zmQxlN6RQQ5dlTEqDTG9VDdWaRQ9MqMrwulsOUGQg0jHHNUxZi%2FI%2BR0xDp1t1Q8MsF9GXgNmPcUHj93A6laf35ruPDiw%2BsxEIC%2F3Gi7kLxcde72%2FyAD0dOEEUnFHt%2BcArUw4I8gHYN%2BJCnqn0Mol57jYq7AuNZAfkFKgM8V3vZavqyeeVD81Js%2Fs24VstaZEkHyEe0w%2BHJ2ypnZnIf1wEAyoLK%2Bnsqxm2vUo97j%2BDxPpsvh7E7X2BpSPTI0MmqghM97Y0MwJuV9D9evlzzOuGuh8xjxqeDHAH7vwPA5480DyhrPHiZ9kkfVZtL21FwS2Z1F04CuO3MBr6Hy%2BlaQBpyOiDoyXefRa7YXaBwvO3NGhZW6y%2F%2BlxsG%2FyhawebiBzpf5igA9sAu8iGziPYL3f3z%2BOTf8gc1lyhcOHN2PIDtqnWSPIDsxz%2F%2FqTGfvzXRsu4EDreAUGXsaHWfaB8%2F0BgZuUCXj9EXm1kdZ8io%2BufwI%3D%3C%2Fdiagram%3E%3Cdiagram%20id%3D%22RS2BbCfXYksCsHZpGadt%22%20name%3D%22Page-2%22%3E7VhNc5swEP01PqYDyGD72Nhpk2nSTutDnVNHhQ2oFYgRcozz67sYYcAysTPj2G7aE%2BzTB9J7b1caemQc5x8lTaM7EQDvOVaQ98ik5zg26Q%2FxUSDLEhlapARCyQLdqQam7Ak0aGl0zgLIWh2VEFyxtA36IknAVy2MSikW7W4Pgre%2FmtIQDGDqU26i31mgIr0LZ1Dj18DCqPqy7Y3KlphWnfVOsogGYtGAyFWPjKUQqnyL8zHwgryKl3Lch47W9cIkJGqfAfkduRGzTzfX4j69AAifbr8GF55em1pWG4YA969DIVUkQpFQflWjl1LMkwCKWS2M6j63QqQI2gj%2BAqWWWkw6VwKhSMVct%2BKC5XKmx6%2BC%2ByJ451bhJG82TpY6KtdaLLCTAg1lYi59eGbflZWoDEE9089dC4UOBxEDrgfHSeBUscf2Oqi2WrjuV6uBL1qQF4ij532kfK6%2F9CUFiR8WCcJTRRUY8tXiFEwvIqZgmtIVFwvM0LYQen6QCvLnKTUp0AMc2ymHLKsE0HZf1NliVykQNTLFs16Jtb7B2jfwAcWSJyerP%2FLOjKzBSfI%2FZ2rWeG9kP0Z18hdBlftnUDPcPWtG%2F5Q1wzXc%2F1ko9sDwDN1UGn2s2sJkSorfMBZcSEQSkRRyPzDONyDKWZhg6COHmFbkssgKhofme90QsyBYeWVbTrX9c4C0IsONGuS4Rlp5W7KKvFZWjfYvQdmCxZwmXVwduP64Voso1zXrj2NtYWoNHv6McwyuMlA%2FMiXSFD2y27P7e1FCxp7oz9VUhfNSwRK12o972XMnxVxYqrKyar0kHfZSptsonXJtqGUTU63RMW1tmxeSQivAa7Zp7H9KKa%2Bt1MgUanBUoaytQpXhf6EaBfDUQhFDqN1X%2FKMeGfaozRjZcmU99pHhme7GS5l6684uzdKp1GCntd2jWntgqDQFvPed2RXoDPzsmNW6%2Bpv11h09%2BJuKtWNef6Z%2BBMGcn9rUm0X6DO71jvkbJusk643ZeodarrvL1sPD2BrD%2Bvfyqq3xk55c%2FQE%3D%3C%2Fdiagram%3E%3Cdiagram%20id%3D%22dfIvOOW6uf5FMUzMlSmy%22%20name%3D%22Page-3%22%3E5VrLcpswFP0az6SLdngYbC9rnDSLpJ0m7fSxyahGASWAGCFiO1%2FfCwgwSNhpJ8aOvTI6CD3OuboP8MB0wuUnhmL%2Fmro4GBiauxyYs4Fh6OZwDD8ZsiqQsWYWgMeIKzrVwC15xgLUBJoSFyeNjpzSgJO4Cc5pFOE5b2CIMbpodrunQXPWGHlYAm7nKJDRH8TlvtiFMarxS0w8v5xZtyfFnRCVncVOEh%2B5dLEGmecD02GU8uIqXDo4yMgreSmeu%2Bi4Wy2M4Yi%2F6IEpir9MnWD29fHq4vnSumb%2B%2FL0QI%2BGrcsPYhf2LJmXcpx6NUHBeo1NG08jF2agatOo%2BV5TGAOoAPmDOV0JMlHIKkM%2FDQNwt5swm6tyKgBKasjnesP7SJBDzMN%2FQz6gIB0vFNMScreA5hgPEyVNzHUiYjFf1q1mFC0HsP5Asxn1CQSpmusXAIAPsAs05ZQQsvK1DzXJG2cInHN%2FGKCdjAUdNxegTZhwvN3Mqc1A%2BMBR2Kg5q2VzUVq%2BXpuyvWbyt7Yg1Q2LtIU34wfGk2%2Fsmaqgk6i4pbWxg2CjMiAhgJdNvVdPjFSNrfCYLEgYowr2QObSbZJoyl4am4LICX51MSyIzgQOKK6hNF%2BydN2lBAfEiuJ4DB8C%2FOc0YIhBRPoobIXHdwpHihDyjP%2FlQmSuNKYl4viFrOrBm2VjgO5PCjWZDJ5zRR%2BzQgMK4s4jmKt2TIGhBL1Om05Y65WqpZVmSWmOFWOautLIlre7BlUbuWjpw0nJZLU%2BlKzyV6nTtTLCRJFilU8tL3bS9lHbWcGowv3bz7sCc1%2F69V6nwGsMM85RFgNEYM0h2aJRThvjR%2B7LRRvXM9uGQnVkV6ns5HGNJOo4ecZ6kzjHkqOy09SqDjdDLluWa9KmWrktyvK3KSQTPrZVThyo9VU5yEaBwY3LscA46y7WN%2FQcKUyI2z3OTOtF1Tsj16B3vB9SxQpH39hsqdLnkqzJfOBPs6PPeLXrZ22N7r4VKOX%2B%2FwQIoZKuf2fMfrLL5SwyXN2bLRmslWq8YZMp8dGuU6RK0pzAjV5LiGDXKjgOrN8bjyd7DyOhUDXv4UsO292rYclGRYH6XN8%2Fq4O6UXWQLf8OBY%2FNhGjcP08RUBHV7R0Ei0RIn9cfk8%2BQu%2Fc5HxJt9%2Ba34SnDTlX316naqV0R7ec2hpEquCur0B8wbMtk4BgdzPLbcbTDdOWuzXtYVqik%2FU%2BzMvuWKoyEaZoweU53xH5INm5JNFIrt6nWtcrWbqowyipy4Yq3CUKGY%2FjqKQbP%2Bq0B%2Bb%2B0PF%2Bb5Xw%3D%3D%3C%2Fdiagram%3E%3Cdiagram%20id%3D%22zS0qvL6dZnKoQc5eDSts%22%20name%3D%22Page-4%22%3E5Vpbc%2BI2FP41zKQP3fEdeFwgadN2p%2BkynSRPGS0W4MRYriwC5Nf3yJZtZAkDGwwJPIGOj2zr%2B3Sucsvuz5a%2FURRPvxEfhy3L8Jcte9CyLNN2OvDDJatM0jHsTDChgS%2BUSsEweMNCaAjpPPBxIikyQkIWxLJwRKIIj5gkQ5SShaw2JqH81BhNsCIYjlCoSu8Dn03FKqx2Kf8dB5Np%2FmTT62ZXZihXFitJpsgnizWRfd2y%2B5QQlv2bLfs45ODluGTzbjZcLV6M4ojtMuHh8Xn%2B9%2F3SuOs9P%2F35z%2Bs3cvvH26%2BCjFcUzsWCxcuyVY4A9gEQMSSUTcmERCi8LqU9SuaRj%2FljDBiVOn8REoPQBOEzZmwl2EVzRkA0ZbNQXM2eyR%2B0cW1ClJA5HeGaBeV7BNEJZjV6VsEAbF1MZpjRFcyjOEQseJXfA4k9NCn0Spjhj0B6D9RNBfX%2BFAURiBaEvigMlPhysBbTgOFhjFIYFmB1OixfMWV4WY%2BmunoxId%2BxwmQdMVyU%2B9%2FMVaZre98zGoLLUuBiUxwpMG0BRkbx8DCZnVPj5G7AyUMzjkUIz%2B8NWxbc3LgppBOWomFcJRjgoXB5PI9GLCDRLwrCySKYhSjC23dhAgbIhL3bxmHwLlxrDrihAm4ZGsAL4eEN2T6FuwS86OqBz%2F%2Fi5sNHcbt0MFhKo5UYHdDNeju62fYp3ayn2APFbE6jhL85WMZTvuUrFMIWZTLiKAwmEfwfAVAwwe7xjRxAlvBVXJgFvp%2BRi5PgDf1Ib8Uxj0kQsXRhbq%2FlDvi9gM8kozazFEpecJ%2BEBO47iEhqXeMgDCuigzgsRzYg11U9lq0xILsp%2B2lrPVbByy6O66ddVAMeyW6f3CN1FUTHNAA411Lk89nu%2B7gccRe3ErQ1McTUMdaYCXQUwoaMAKwgG%2BYRme97EZTPiL0tttWVnZVjapyVe0ymTDVtL0zKkJ3VdzW9khwbZ%2FT7e%2FKrBpyXp8nzj51Offbqs7tjWmRuoOZI5WfnFDCvZa3OXmlrOrrDNIDVc3926FzWdHZlzT0pa47ifirpLIkxRZcVJDqyD2vrgoRz1CChL8LXuTG0iS2EjP6HTm67Ry23Bw%2FD%2F95eZrf3j0%2FP9v2%2FRmzf3OYNjk8bHkxN2axd6HvDQzr1K6VotaYgDLe88x0XlIQ7RoXwbqWhvEXfM%2Bv1Xdep04c%2F2RuX%2B6NY%2BjvsUW0CJHl%2BvW6TCUMMX47f7Faobp%2Fcb6qtgKJwTZuJF8MNkCNxYxqaoNZpiJvN3kiiZrvlHDVUOc4OpYx51FBlqWnAKsY8%2BPOBl0b%2BH7zFlUZ6UUeWPfg0Z6B4hMHbU7VQ%2FLx7f59wl8cNmVtNw6arodZpiln1yFQiS2kEfKysrmoqHyCrU%2Bua0vNj9pTJz9wC7HrSZBNwNMFa590aCwhqz1JiDBKsOIaU%2B7I5qzSaTY3f0p0ON0ZaXYIFpGFKAZaLpqxyNqA7z2%2FqaED7tupZTlq6pIVgHmx462B8fmcDBzA43eFmUyWN9nU9hY8P262oS2G3Nis20HLwrqg%2BdTRUI9mYNPzc9yuWfajUS96h%2BtNi95ipV37gsn6khfi0aoFSYHq15nq437lKpVChGOdfpRi19La%2FyFmaht3jFir5eeU5f5xUV1Bs77JuILTZNmu7I7uBrlffNq3q2%2B6WNmvVzcj6%2B7ZZYVh%2Bo5ypl19629f%2FAw%3D%3D%3C%2Fdiagram%3E%3Cdiagram%20id%3D%22N1fN19OSE8Ezd9pb87vr%22%20name%3D%22Page-5%22%3E7VvRbqM4FP0apO5DKzABkscm7XRWsytVk0ozOy%2BRA07iHYIZY5pkvn5tcEKwTWi7DRklI1URvhgD59x7fH1NLXe0XD9QmC7%2BJhGKLWBHa8u9swAIPI%2F%2FCsNGGgZ%2BaZhTHJUmpzKM8U8kjba05jhCWa0jIyRmOK0bQ5IkKGQ1G6SUrOrdZiSu3zWFc6QZxiGMdesXHLFFae2DoLJ%2FRHi%2B2N7Z8QflmSXcdpZvki1gRFZ7JvfeckeUEFYeLdcjFAvstriU131oOLt7MIoS9pILso%2Ff%2Bt%2B8py%2BD9e0mmz4l9M%2FVj2s5yjOMc%2FnC2SYJJyuImQV8uEwtdxjz4YfjXXMumlcZSiJE%2F5CvxjZbvLIVXsYw4a3haoEZGqcwFKdW3Du4bcGWMW85%2FFDeGVGG1o2v5OyA4g6GyBIxuuFd5AXAk9hK5wKubK8qqkBf2hZ7NAFfGqF0j%2Flu7ApBfiBBfAWgQAOUIpbTJOP4FUBOKT8qMCQpwySBcR3oEtgJRVkes8lhFtSWwgUHltUxhzGeJ%2Fw45AAjyg0Cfsy9%2FVaeWOIoEpcP%2Bf3xTzgthrJ5OyU4YQVY3tDy7sRYOSNZGa9i6IxR8h2NSEz4uHcJKVxghuNYMb2I9mZfbfQF1RUc3RUckyv03sETPj0MJ4%2Fws%2F%2Fp6WHqXvuf8yeQHQ4tO4IMXjZh%2FTphhtB1bANf7tH40kN3O6lwkoqoLCYfS%2BisGss7annghgg%2Fi75qn3ooG8Z4XeQ3jf5bC4Dv1VzLM7iWa3CtwbFcC%2Fi6FjBIhWORFFEo5oHLZiwY1BhzTq4GoK9Rlif4R44mMQm%2F6%2BEXPt%2BI8L8qz46ESHhVTJa%2FAvlgWOYDcgq4iSSuwZ2eS12UB4Be3QN8QyrndDl%2F69NBJfLG2bvT1Nd16nh5BpEDpojZGd8dsJ4G2DIXL3g%2Bbt3sJ83CZis0aSz5XcqaZ8pxIrxdiPATFBfwXjRpbj1%2F6L8wfzgaa3r6MCUkRvCckoY30KSkeY5hyRd0SVOg0YTWIUrPLLt7B6IMc1WnRLkaHSiao7FsEsoWZC4E8b6yDinJ%2BfIskpBXff4iJJUw%2F4sY28gSpmDANOmLGx2e8vlzkZyG6MDzbwuhkM7RG1ihKOZLjuf6c5hALi69pRRu9jpIb6tGfhSGvUTOrk95IPD2CWvt73u2QnD5BBXdu1d5uwfo2f3rVt%2BnTP28gQJw7%2BSp30CDs8LRJrP9Akpx2h5b7i3%2FY2ekiy0lCaeuga4hE9zpYjf1LkcDvwMV5HDRzVdx%2FY3H0yxp%2BKcw2PbOcLeWtyhbm%2F3WI6KYQyB8oTC%2BTVgPVe9bhbV%2FCmH1lBJ3L1A2fFr6b12pqb8%2FCA71P44QO66uxKZa6p4YP%2F1KYuzb6gLPJMZel2Ls6Iu8jBGKCgedIf5moTguKtnVHpTsfj56fMDdGtlURNo3aPSgU43W85QZxXwqLWZUNkGUclwumzNF5UyLi443kvR14G%2FSWkgDJydNr142imZIeBpCxJDTstx%2FNlS2zXXKvlr%2F1PoIPA38jnPYWgbbkr1a71gBkCXB9hKAbab0xanq%2F4sqvXJZk8Jzyzla4qenpBc9Q%2FyY9riOFz%2B2rnpbWq6q7HtUxEDR7cRffHmD4EYtzp884d6%2BhrZXzG1nNkG8SmN269AaYYZqlem7rOP5PNDYKg5vKEpj7rpXRi%2B%2FLMoUoQoM2RnolDNDlQAVn9EJIGRaxuhZzSVv4k1Jqw3a2PEEo6fVCWF4tqm4W2H%2BaEVSfYn70If5vG7fODN%2BFHO8nTNbY%2BRCEu6XloabFr7HrQ27yte0XkutN7DdQ%2F1fW%2BvlzeofGcru1X%2BDuPf%2FAQ%3D%3D%3C%2Fdiagram%3E%3C%2Fmxfile%3E).\\n\\n- Futures\\n    - One of the points of S/R is to avoid the allocations associated with futures, also, futures are single-use, whereas S/R, in general, can be used (started) multiple times. - Dr. H. Kaiser\\n\\n\\nGoal is to enable all Sender CPOs to do the following:\\n- If we write a sender and pass it to a function which could be a coroutine that could co_await that sender and get its result.\\n- If they are not generally awaitable then we can await transform them (i.e. make them awaitable).\\n\\n\\n##  6. More Context on:\\n\\n###  6.1. Coroutines\\n\\nQuoting from the below references:\\n- Some senders are awaitables\\n- All awaitables are senders\\n- When the coroutine is in a suspended state it basically becomes a callback function but we know callbacks are straightforward receivers, then coroutines are receivers and awaitables are senders.\\n\\n###  6.2. Senders and Receivers\\n\\n- Senders are just a lazy value\\n- Receivers are like callbacks which provide 3 slots\\n  - set_value\\n  - set_error\\n  - set_stopped\\n- The relationship between these two is that the sender passes the values to the receiver which has 3 specific slots to report to.\\n- A Scheduler is a handle where these computations will be performed. These produce senders which maybe accepted by the async algorithms.\\n\\n##  7. Work\\n\\nMy PRs can be found using [this](https://github.com/STEllAR-GROUP/hpx/pulls?q=is%3Apr+author%3ASAtacker) link as it\'ll always be updated.\\n\\nFollowing are the Merged PRs until now:\\n\\nMinor Improvements:\\n\\n- [[execution] Add schedule_result_t alias template](https://github.com/STEllAR-GROUP/hpx/pull/5846)\\n  - This was a warm-up PR to ensure that I can read the standard reference implementation and can write tests that are necessary.\\n- [[hpx::execution] Added forwarding_scheduler_query](https://github.com/STEllAR-GROUP/hpx/pull/5865)\\n  - I revised a lot of tag_* mathods especially [tag_invoke](https://www.open-std.org/jtc1/sc22/WG21/docs/papers/2019/p1895r0.pdf). \\n  - Found minor bug in the implementation for it and fixed it [link](https://github.com/STEllAR-GROUP/hpx/pull/5865/files#diff-c220d96705c8982a255599928a8fce5d89c4d0b54344d7357177bd8c22f5f67f)\\n  - As far as the tests went it was pretty clear that we need to test the CPO using a custo implementation\\n- [[P2300] enhancements: receiver_of, sender_of improvements](https://github.com/STEllAR-GROUP/hpx/pull/5920)\\n  - A good revision of SFINAE helped me implement the following metafunctions\\n        `is_invocable_variant_of_tuples`, `is_invocable_variant`\\n  - Added `sender_of` concept that defines the requirements for a sender type that on successful completion sends the specified set of value types.\\n  - Added `receiver_of` concept takes a receiver and an instance of the `completion_signatures<>` class template.\\n  - Tons of tests for all the above.\\n- [[P2300] Added fundamental coroutine_traits for S/R](https://github.com/STEllAR-GROUP/hpx/pull/5945)\\n  - Firstly I had to modify the C++ compiler check for C++ 20 Coroutines functionality.\\n  - This led to an addition of a new `hpx/config/coroutines_support.hpp` header.\\n  - An awaiter concept - An Awaiter type is a type that implements the three special methods that are called as part of a co_await expression: await_ready, await_suspend and await_resume.\\n  - An awaitable concept - Something that you can apply the \u2018co_await\u2019 operator to. If the promise type defines an await_transform() member then the awaitable is obtained by calling `promise.await_transform(value)`, passing the awaited value. Simply checks whether the type supports applying the co_await operator to avalue of that type. If the object has either a member or non-member operator co_await() then its return value must satisfy the Awaiter concept. Otherwise, the Awaitable object must satisfy the Awaiter concept itself.\\n  - Tons of tests as usual\\n\\nMajor Work:\\n\\n1. Adapt `get_completion_signatures` when Sender is a awaitable\\nThis confused me for a while actually. There was a minor bug in the P2300 5th Rev Specification. It did not consider the environment for awaitables i.e. it did not consider the promise type for awaitables. All those awaitables whose promise type defines await_transform would not be considered awaitables and there won\'t be any completion signatures for them. This led to a further discussion recently with Eric Niebler. I think that it will be revised even further. But for now we can deal with senders that expose a co_await operator.\\n2. Utility `as_awaitable_t`\\n    - `receiver_base`, `sender_awaitable_base` \\n    - to transform an object into one that is awaitable within a particular coroutine.\\n3. promise base for 5.\\n4. operation base for 5.\\n5. Utility `connect_awaitable` to adapt `connect` mentioned in [spec](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2300r5.html#spec-execution.senders.connect) 2.2\\n6. Utility `with_awaitable_senders`  \\n    - Used as the base class of a coroutine promise type, makes senders awaitable in that coroutine type\\n\\n[This](https://github.com/STEllAR-GROUP/hpx/pull/5990) is the PR for the above work.\\n\\n##  8. Future work\\n\\n- Test these on all the algorithms that returns a sender.\\n\\n##  9. Extra Contribution\\n\\n- I discovered a bug in the standard specification of P2300 which is filed as an issue and made a PR to the reference implementation for this issue is currently in progress. [here](https://github.com/brycelelbach/wg21_p2300_std_execution/pull/602)\\n\\n\\n##  10. Example Code\\n\\n```cpp\\n\\ntemplate <typename T>\\nstruct custom_task\\n{\\n    template <typename A>\\n    struct custom;\\n    using promise_type = custom<T>;\\n\\n    custom_task() = default;\\n\\n    custom_task(custom_task&& that) noexcept\\n      : coro_(std::exchange(that.coro_, {}))\\n    {\\n    }\\n\\n    ~custom_task()\\n    {\\n        if (coro_)\\n            coro_.destroy();\\n    }\\n\\n    explicit custom_task(\\n        hpx::coro::coroutine_handle<promise_type> __coro) noexcept\\n      : coro_(__coro)\\n    {\\n    }\\n\\n    struct final_awaitable\\n    {\\n        static std::false_type await_ready() noexcept\\n        {\\n            return {};\\n        }\\n        static hpx::coro::coroutine_handle<> await_suspend(\\n            hpx::coro::coroutine_handle<promise_type> h) noexcept\\n        {\\n            return h.promise().continuation();\\n        }\\n        static void await_resume() noexcept {}\\n    };\\n\\n    template <typename A>\\n    struct custom\\n      : hpx::execution::experimental::with_awaitable_senders<custom<T>>\\n    {\\n        custom_task get_return_object() noexcept\\n        {\\n            return custom_task(\\n                hpx::coro::coroutine_handle<promise_type>::from_promise(*this));\\n        }\\n        hpx::coro::suspend_always initial_suspend() noexcept\\n        {\\n            return {};\\n        }\\n        final_awaitable final_suspend() noexcept\\n        {\\n            return {};\\n        }\\n        void unhandled_exception() {}\\n\\n        void return_value(T value) noexcept\\n        {\\n            data_.template emplace<1>(std::move(value));\\n        }\\n        std::variant<std::monostate, T, std::exception_ptr> data_{};\\n\\n        custom_task context_;\\n    };\\n\\n    template <typename ParentPromise = void>\\n    struct task_awaitable\\n    {\\n        hpx::coro::coroutine_handle<promise_type> coro_;\\n        std::optional<custom<ParentPromise>> context_{};\\n\\n        static std::false_type await_ready() noexcept\\n        {\\n            return {};\\n        }\\n        template <typename ParentPromise2>\\n        hpx::coro::coroutine_handle<> await_suspend(\\n            hpx::coro::coroutine_handle<ParentPromise2> parent) noexcept\\n        {\\n            coro_.promise().set_continuation(parent);\\n            return coro_;\\n        }\\n        T await_resume()\\n        {\\n            context_.reset();\\n            if (coro_.promise().data_.index() == 2)\\n                std::rethrow_exception(\\n                    std::get<2>(std::move(coro_.promise().data_)));\\n            if constexpr (!std::is_void_v<T>)\\n                return std::get<1>(std::move(coro_.promise().data_));\\n        }\\n    };\\n\\n    friend task_awaitable<> operator co_await(custom_task&& self) noexcept\\n    {\\n        return task_awaitable<>{std::exchange(self.coro_, {})};\\n    }\\n\\n    template <typename ParentPromise>\\n    friend task_awaitable<ParentPromise> tag_invoke(\\n        hpx::execution::experimental::as_awaitable_t, custom_task&& self,\\n        ParentPromise&) noexcept\\n    {\\n        return task_awaitable<ParentPromise>{std::exchange(self.coro_, {})};\\n    }\\n    hpx::coro::coroutine_handle<promise_type> coro_;\\n};\\n\\ntemplate <typename S1,\\n    typename = std::enable_if_t<hpx::execution::experimental::is_sender_v<S1>>>\\ncustom_task<int> async_answer_custom(S1 s1)\\n{\\n    // Senders are implicitly awaitable (in this coroutine type):\\n    co_return co_await (S1 &&) s1;\\n}\\n```\\n\\n```cpp\\n    try\\n    {\\n        // Awaitables are implicitly senders:\\n        auto i = hpx::this_thread::experimental::sync_wait(\\n            async_answer_custom(hpx::execution::experimental::just(42)))\\n                     .value();\\n        std::cout << \\"The answer is \\" << hpx::get<0>(i) << \'\\\\n\';\\n    }\\n    catch (std::exception& e)\\n    {\\n        std::cout << e.what() << \'\\\\n\';\\n    }\\n```\\n\\n\\n##  11. References\\n\\n- [P2300](https://wg21.link/P2300)\\n- [the reference implementation](https://github.com/brycelelbach/wg21_p2300_std_execution)\\n- [libunifex](https://github.com/facebookexperimental/libunifex)\\n- [HPX main P2300 Issue](https://github.com/STEllAR-GROUP/hpx/issues/5045)\\n\\n- Talks\\n  - \\"A Tour of C++ Executors, Part 1\\": https://www.youtube.com/watch?v=xLboNIf7BTg\\n  - \\"A Tour of C++ Executors, Part 2\\": https://www.youtube.com/watch?v=6a0zzUBUNW4\\n  - \\"Live-coding sender/receiver\\": https://www.youtube.com/watch?v=xiaqNvqRB2E\\n  - \\"A Unifying Abstraction for Async in C++\\": https://www.youtube.com/watch?v=tF-Nz4aRWAM\\n  - \\"Structured Concurrency\\": https://www.youtube.com/watch?v=Xq2IMOPjPs0\\n  - \\"Structured Networking\\": https://www.youtube.com/watch?v=nmQgVVQCFu4\\n  - \\"C++ Standard Parallelism\\": https://www.youtube.com/watch?v=r1COmv0CdW4 \\n\\nimport Comments from \'../src/components/comments/Comments\'\\n\\n<Comments />"},{"id":"dbus-crossc","metadata":{"permalink":"/blog/dbus-crossc","editUrl":"https://github.comSAtacker/satacker.github.io/edit/main/blog/blog/2021-06-23-dbus-crossc.mdx","source":"@site/blog/2021-06-23-dbus-crossc.mdx","title":"DBus Cross-compilation","description":"I have made a curated content on DBus cross-compilation on Ubuntu 20.04","date":"2021-06-23T00:00:00.000Z","formattedDate":"June 23, 2021","tags":[{"label":"dbus","permalink":"/blog/tags/dbus"},{"label":"linux","permalink":"/blog/tags/linux"},{"label":"ipc","permalink":"/blog/tags/ipc"},{"label":"beagle","permalink":"/blog/tags/beagle"}],"readingTime":1.565,"hasTruncateMarker":true,"authors":[{"name":"Shreyas Atre","title":"RI at STE||AR Group (Louisiana State University), Maintainer of WasmEdge PySDK & Install Script","url":"https://github.com/SAtacker","imageURL":"https://github.com/SAtacker.png","key":"SAtacker"}],"frontMatter":{"slug":"dbus-crossc","title":"DBus Cross-compilation","authors":["SAtacker"],"tags":["dbus","linux","ipc","beagle"]},"prevItem":{"title":"GSoC 2022 Report","permalink":"/blog/gsoc-2022-work"},"nextItem":{"title":"Hello","permalink":"/blog/hello-world"}},"content":"I have made a curated content on DBus cross-compilation on Ubuntu 20.04\\n\\n\x3c!-- truncate --\x3e\\n\\n## Cross-compilation tools\\n\\n* Go through the best guide [here](https://www.reddit.com/r/BeagleBone/comments/du4lwb/guide_cross_compiling_for_the_beaglebone_black_on/)\\n\\n```\\ngcc-arm-linux-gnueabi:\\n  Installed: (none)\\n  Candidate: 4:9.3.0-1ubuntu2\\n  Version table:\\n     4:9.3.0-1ubuntu2 500\\n        500 http://in.archive.ubuntu.com/ubuntu focal/universe amd64 Packages\\n\\nbinutils-arm-linux-gnueabi:\\n  Installed: 2.34-6ubuntu1.1\\n  Candidate: 2.34-6ubuntu1.1\\n  Version table:\\n *** 2.34-6ubuntu1.1 500\\n        500 http://in.archive.ubuntu.com/ubuntu focal-updates/universe amd64 Packages\\n        500 http://security.ubuntu.com/ubuntu focal-security/universe amd64 Packages\\n        100 /var/lib/dpkg/status\\n     2.34-6ubuntu1 500\\n        500 http://in.archive.ubuntu.com/ubuntu focal/universe amd64 Packages\\n\\n```\\n\\n\\n## Installing DBus for `arm-linux-gnueabi`\\n\\n* Note: The low-level libdbus reference library has no required dependencies; the reference bus daemon\'s only required dependency is an XML parser (expat).\\n\\n### 1. Installing `expat`\\n\\n* Currently `expat 2.4.1` is stable\\n* Download `expat 2.4.1` and `tar xvfz expat-2.4.1.tar.gz`\\n* Configure expat\\n\\n```sh\\n./configure  --without-tests --without-examples --prefix=/usr/arm-linux-gnueabi/ --host=arm-linux-gnueabi CC=/usr/bin/arm-linux-gnueabi-gcc-8 CXX=/usr/bin/arm-linux-gnueabi-g++-8\\nmake -j8\\nsudo make install\\n```\\n\\n### 2. Installing `libdbus`\\n\\n* Once completed download `dbus` from [here](https://dbus.freedesktop.org/releases/dbus/)\\n* Currently `1.12.x` are the stable ones\\n* `tar xvfz dbus-1.12.20.tar.gz`\\n\\n```sh\\n./configure --disable-doxygen-docs --disable-xml-docs --exec-prefix=/usr/arm-linux-gnueabi --host=arm-linux-gnueabi CC=/usr/bin/arm-linux-gnueabi-gcc-8 CXX=/usr/bin/arm-linux-gnueabi-g++-8 CFLAGS=-I/usr/arm-linux-gnueabi/include LDFLAGS=-L/usr/arm-linux-gnueabi/lib/ LIBS=-lexpat\\nmake -j8\\nsudo make install\\n```\\n\\n## Other Useful Links\\n\\n* DBus with Connman - [Link](https://gist.github.com/tranthamp/2721326)\\n\\n\x3c!-- GIST --\x3e\\n\\n```sh\\n# Connman Technology API examples: (Object Path: /net/connman/technology/<wifi/ethernet>, Interface: net.connman.Technology)\\n# GetProperties\\ndbus-send --system --dest=net.connman --print-reply /net/connman/technology/wifi net.connman.Technology.GetProperties\\n\\n# Scan\\ndbus-send --system --dest=net.connman --print-reply /net/connman/technology/wifi net.connman.Technology.Scan\\n\\n# Disable/Enable wifi\\ndbus-send --system --dest=net.connman --print-reply /net/connman/technology/wifi net.connman.Technology.SetProperty string:Powered variant:boolean:true\\n\\n# Disable/Enable ethernet\\ndbus-send --system --dest=net.connman --print-reply /net/connman/technology/ethernet net.connman.Technology.SetProperty string:Powered variant:boolean:true\\n\\n# Connman Manager API examples: (Object Path: /, Interface: net.connman.Manager)\\ndbus-send --system --dest=net.connman --print-reply / net.connman.Manager.GetProperties\\ndbus-send --system --dest=net.connman --print-reply / net.connman.Manager.GetTechnologies\\ndbus-send --system --dest=net.connman --print-reply / net.connman.Manager.GetServices\\n\\n# See: http://git.kernel.org/?p=network/connman/connman.git;a=tree;f=doc;hb=HEAD\\n```\\n\\n\x3c!-- /GIST --\x3e\\n\\n:::info\\n* The best way to get to know dbus is from their own tutorial [here](https://dbus.freedesktop.org/doc/dbus-tutorial.html).\\n* [This](https://github.com/makercrew/dbus-sample) has done a great job of giving an overview of the API to get yourself quickly started.\\n\\n:::\\n\\nimport Comments from \'../src/components/comments/Comments\'\\n\\n----\\n<Comments />\\n----"},{"id":"hello-world","metadata":{"permalink":"/blog/hello-world","editUrl":"https://github.comSAtacker/satacker.github.io/edit/main/blog/blog/2021-06-08-hello-world.mdx","source":"@site/blog/2021-06-08-hello-world.mdx","title":"Hello","description":"Welcome to this blog. This blog is created with Docusaurus 2 alpha.","date":"2021-06-08T00:00:00.000Z","formattedDate":"June 8, 2021","tags":[{"label":"hello","permalink":"/blog/tags/hello"},{"label":"docusaurus","permalink":"/blog/tags/docusaurus"}],"readingTime":0.16,"hasTruncateMarker":true,"authors":[{"name":"Shreyas Atre","title":"RI at STE||AR Group (Louisiana State University), Maintainer of WasmEdge PySDK & Install Script","url":"https://github.com/SAtacker","imageURL":"https://github.com/SAtacker.png","key":"SAtacker"}],"frontMatter":{"slug":"hello-world","title":"Hello","authors":["SAtacker"],"tags":["hello","docusaurus"]},"prevItem":{"title":"DBus Cross-compilation","permalink":"/blog/dbus-crossc"},"nextItem":{"title":"Pre-Coding Period","permalink":"/blog/pre-coding"}},"content":"Welcome to this blog. This blog is created with [**Docusaurus 2 alpha**](https://docusaurus.io/).\\n\\n\x3c!--truncate--\x3e\\n\\nThis is a test post.\\n\\nA whole bunch of other information.\\n\\nimport Comments from \'../src/components/comments/Comments\'\\n\\n----\\n<Comments />\\n----"},{"id":"pre-coding","metadata":{"permalink":"/blog/pre-coding","editUrl":"https://github.comSAtacker/satacker.github.io/edit/main/blog/blog/2021-04-21-pre-coding.mdx","source":"@site/blog/2021-04-21-pre-coding.mdx","title":"Pre-Coding Period","description":"Points to note","date":"2021-04-21T00:00:00.000Z","formattedDate":"April 21, 2021","tags":[{"label":"gsoc","permalink":"/blog/tags/gsoc"},{"label":"beagle-config","permalink":"/blog/tags/beagle-config"}],"readingTime":2.19,"hasTruncateMarker":true,"authors":[{"name":"Shreyas Atre","title":"RI at STE||AR Group (Louisiana State University), Maintainer of WasmEdge PySDK & Install Script","url":"https://github.com/SAtacker","imageURL":"https://github.com/SAtacker.png","key":"SAtacker"}],"frontMatter":{"slug":"pre-coding","title":"Pre-Coding Period","authors":["SAtacker"],"tags":["gsoc","beagle-config"]},"prevItem":{"title":"Hello","permalink":"/blog/hello-world"},"nextItem":{"title":"Beaglebone & Linux","permalink":"/blog/linux_beagle"}},"content":"### Points to note\\n- Interface Namings\\n  - It is of my knowledge that the USB CDC ECM class interfaces are Predictable [source 1](https://cgit.freedesktop.org/systemd/systemd/tree/src/udev/udev-builtin-net_id.c##n20), [source 2](https://www.freedesktop.org/wiki/Software/systemd/PredictableNetworkInterfaceNames/)\\n  - Windows vs Unix Like \\n\x3c!--truncate--\x3e\\n\\n### Disclaimer\\n\\nCurrently, it\'s the review period till May 17th. I have started looking at some basic points I need to make concrete decisions about as I go ahead. Even if my selection does not happen due to misfortune these readings will only benefit next time or whoever carries it on.\\n\\n### The Why Section\\n1. Interface namings are necessary to let the (Host Application) beagle-config know which one is the beagle device. After getting to know the interface name system calls to set rules in iptables can be executed. This would completely eliminate any CLI usage. Basically, users would have to just plugin the beagle device and everything will be taken care of. (Note - This is just the beginning)\\n\\n### The How Section\\n1. \\n * High-Level overview - Since Udev rules decide the interface name in Linux it would just be of the sort `enx78e7d1ea46da` which is essentially incorporating the MAC address of the beagle device. On windows there\'s just usual ICS without lowlevel configurations.\\n * Low-Level Windows - A simple PowerShell script could do it\\n A simple PowerShell script from [here](https://superuser.com/questions/470319/how-to-enable-internet-connection-sharing-using-command-line) could do it.\\n\\n```\\n # Register the HNetCfg library (once)\\nregsvr32 hnetcfg.dll\\n\\n# Create a NetSharingManager object\\n$m = New-Object -ComObject HNetCfg.HNetShare\\n\\n# List connections\\n$m.EnumEveryConnection |% { $m.NetConnectionProps.Invoke($_) }\\n\\n# Find connection\\n$c = $m.EnumEveryConnection |? { $m.NetConnectionProps.Invoke($_).Name -eq \\"Ethernet\\" }\\n\\n# Get sharing configuration\\n$config = $m.INetSharingConfigurationForINetConnection.Invoke($c)\\n\\n# See if sharing is enabled\\nWrite-Output $config.SharingEnabled\\n\\n# See the role of connection in sharing\\n# 0 - public, 1 - private\\n# Only meaningful if SharingEnabled is True\\nWrite-Output $config.SharingType\\n\\n# Enable sharing (0 - public, 1 - private)\\n$config.EnableSharing(0)\\n\\n# Disable sharing\\n$config.DisableSharing()\\n```\\n * Low-Level Linux- We would look for the default ip-address of beagle devices. Get the interface name and then use iptables to set packet filter rules for ICS. \\n \x3c!-- The below script is from [here](https://stackoverflow.com/questions/848040/how-can-i-get-the-interface-name-index-associated-with-a-tcp-socket) --\x3e\\n```\\n// look which interface contains the wanted IP.\\n// When found, ifa->ifa_name contains the name of the interface (eth0, eth1, ppp0...)\\nfor (ifa = ifaddr; ifa != NULL; ifa = ifa->ifa_next)\\n{\\n    if (ifa->ifa_addr)\\n    {\\n        if (AF_INET == ifa->ifa_addr->sa_family)\\n        {\\n            struct sockaddr_in* inaddr = (struct sockaddr_in*)ifa->ifa_addr;\\n\\n            if (inaddr->sin_addr.s_addr == addr.sin_addr.s_addr)\\n            {\\n                if (ifa->ifa_name)\\n                {\\n                    // Found it\\n                }\\n            }\\n        }\\n    }\\n}\\nfreeifaddrs(ifaddr);\\n```\\n\\n* Further things would be added as the time flows and exams are over till May Mid.\\n\\nimport Comments from \'../src/components/comments/Comments\'\\n\\n----\\n<Comments />\\n----"},{"id":"linux_beagle","metadata":{"permalink":"/blog/linux_beagle","editUrl":"https://github.comSAtacker/satacker.github.io/edit/main/blog/blog/2021-01-29-linux_beagle.mdx","source":"@site/blog/2021-01-29-linux_beagle.mdx","title":"Beaglebone & Linux","description":"I have made a curated content on linux and beaglebone","date":"2021-01-29T00:00:00.000Z","formattedDate":"January 29, 2021","tags":[{"label":"beagle","permalink":"/blog/tags/beagle"},{"label":"linux","permalink":"/blog/tags/linux"}],"readingTime":5.505,"hasTruncateMarker":true,"authors":[{"name":"Shreyas Atre","title":"RI at STE||AR Group (Louisiana State University), Maintainer of WasmEdge PySDK & Install Script","url":"https://github.com/SAtacker","imageURL":"https://github.com/SAtacker.png","key":"SAtacker"}],"frontMatter":{"slug":"linux_beagle","title":"Beaglebone & Linux","authors":["SAtacker"],"tags":["beagle","linux"]},"prevItem":{"title":"Pre-Coding Period","permalink":"/blog/pre-coding"}},"content":"I have made a curated content on linux and beaglebone\\n\\n\x3c!-- truncate --\x3e\\n\\n## Boot\\n\\nPower On\\n\\n1. (First Stage bootloader) TI Boot ROM performs minimal congfig, finds boot image and loads x-loader\\n\\n   - This bootloader initializes a minimal amount of CPU and board hardware, then accesses the first partition of the SD card (which must be in FAT format), and loads a file called \\"MLO\\", and executes it.\\n\\n2. (Second Stage bootloader) MLO \\"Mmc LOader\\" on the FAT partition is the second stage bootloader\\n\\n   - Sets up pin muxing initializes clocks and memory and loads U boot\\n\\n3. (Third Stage ) U-Boot is Das-Universal Boot , u-boot.img on FAT\\n\\n   - Specifies root file system and uses uEnv.txt config , performs additional inits, loads Linux Kernel and passes control\\n   - The uenvcmd from uEnv.txt file is executed.\\n   - The file /dtbs/am335x\u2010bone*device_name*.dtb is read in. This file contains the BBB\u2019s compiled device tree description, which is discussed shortly. After this description is read in, the flattened device tree blob is placed in memory at the address 0x815f0000\\n\\n4. Linux Kernel (EXT4 partition on SD card)\\n   - Decompresses kernel into memory and sets up I2C , USB, etc. and mounts file system containing linux applications i.e mounts the root file system ( mmcroot and mmcrootfstype are defined in uEnv.txt )\\n   - Calls userspace process init\\n\\n## Kernel Space and User Space\\n\\n- Kernel space is the area of system memory where Linux kernel runs and is separated from user space to provide better security and helps to avoid crashing due to badly written user code.\\n\\n```\\n    ---------------------------------------------\\n    |               User space                  |\\n    |  /sbin/init UserCode LinuxConsole         |\\n    |            GNU C lib (glib)               |\\n    ---------------------------------------------\\n                        ||\\n                        \\\\/\\n                    Kernel space\\n                        ||\\n                        \\\\/\\n                    Hardware & Devices\\n```\\n\\n- A kernel module is an object file that contains code, which can be loaded and unloaded from the kernel on demand. In many cases the kernel can even load and unload modules while it is executing, without needing to reboot the BBB.\\n- Example : When we add wifi module it uses LKM (loadable kernel module)\\n- Further kernel services are made available through system calls\\n- System V init or systemd manages these systems and services, can be used to start and stop them\\n\\n### Init process\\n\\n- Begins by reading config from /etc/inittab which defines runlevel\\n- Runlevel defines the state of device and controls which process and services are started by init\\n- In debian there are several runlevels from 0-6 \\n\\n```\\nsatacker@ubuntu:~/Desktop/beagle_notes$ who -r\\n         run-level 5  2021-01-14 22:00\\nsatacker@ubuntu:~/Desktop/beagle_notes$ runlevel\\nN 5\\nsatacker@ubuntu:/etc$ ls -d rc*\\nrc0.d  rc1.d  rc2.d  rc3.d  rc4.d  rc5.d  rc6.d  rcS.d\\n```\\n\\n## Linux System Management\\n\\nHere we see the full administrative control.\\n\\n### Super user\\n\\n- The root account or superuser has access to all the commands and files\\n- `sudo` stands for superuser-do\\n- For ex. Not using `sudo` prevents from accedentally deleting files\\n\\n### File System\\n\\n- File system is a hierarchy of directories\\n- Uses `inodes` to represent the file system objects such as files and directories themselves\\n- For ex. when an extended file system is created (ext3/ext4) on a physical disk an inode table is created. The table links to an inode data structure for each file and directory on that disk\\n\\n```\\ndebian@beaglebone:~/ws$ ls -ail\\ntotal 268\\n   26 drwxr-xr-x 2 debian debian   4096 Jan 29 01:12 .\\n44132 drwxr-xr-x 6 debian debian   4096 Jan 28 23:53 ..\\n 2434 -rwxr-xr-x 1 debian debian   3732 Jan 29 01:04 a.pru0\\n  827 -rwxr-xr-x 1 debian debian    504 Nov 13 03:32 init_script.sh\\n 1244 -rw-r--r-- 1 debian debian    512 Jan 29 00:59 pru_ex_calculator.sim\\n  958 -rw-r--r-- 1 debian debian    100 Jan 29 00:57 pru_ex_counter.sim\\n 1020 -rw-r--r-- 1 debian debian    119 Jan 29 01:04 pru_ex.sim\\n  916 -rw-r--r-- 1 debian debian 245510 Aug 25 01:55 simppru-1.3-armhf.deb\\n```\\n\\n- `drwxr-xr-x` where `d` represents directory , could have been `l` for symlink and `-` for regular file, `c` for character special, `b` for block special, `p` for fifo and `s` for socket. The rest `rwxr-xr-x` represents file system permissions namely `r`ead, `w`rite and e`x`ecute.\\n- Weightings - r = 4 , w = 2 , x = 1 i.e. `rwxrwxrwx` corresponds to 777\\n\\n### Linking to files and dirs\\n\\n- A soft link refers to location of another file/directory\\n- ex. \\n```debian@beaglebone:/usr/local/bin$ ls\\npyctrl_start_server  simppru      simppru-console\\npyctrl_stop_server   simppru-1.3  simppru-console-1.3\\n``` \\nall the simppru refer to the same binary \\n- This can be verified as follows\\n\\n```\\ndebian@beaglebone:/usr/local/bin$ ls -l\\ntotal 792\\n-rwxr-xr-x 1 root root    190 Apr  6  2020 pyctrl_start_server\\n-rwxr-xr-x 1 root root    188 Apr  6  2020 pyctrl_stop_server\\nlrwxrwxrwx 1 root root     11 Aug 25 01:55 simppru -> simppru-1.3\\n-rwxr-xr-x 1 root root 118996 Aug 25 01:53 simppru-1.3\\nlrwxrwxrwx 1 root root     19 Aug 25 01:55 simppru-console -> simppru-console-1.3\\n-rwxr-xr-x 1 root root 677248 Aug 25 01:54 simppru-console-1.3\\n```\\n\\n- Hardlinks refer to the inode of the file , always refer to the source even if the file is removed\\n\\n```\\nsatacker@ubuntu:~/Desktop$ cat test.test \\nHello!\\nsatacker@ubuntu:~/Desktop$ cat temp_hard_link \\nHello!\\nsatacker@ubuntu:~/Desktop$ \\n```\\n\\n```\\nsatacker@ubuntu:~/Desktop$ ls -ail | grep \\"test\\\\|temp_\\" \\n4202899 -rw-rw-r--  2 satacker satacker    0 Jan 29 10:38 temp_hard_link\\n4202899 -rw-rw-r--  2 satacker satacker    0 Jan 29 10:38 test.test\\n```\\nAfter removing\\n```\\nsatacker@ubuntu:~/Desktop$ rm test.test \\nsatacker@ubuntu:~/Desktop$ ls -ail | grep \\"test\\\\|temp_\\" \\n4202899 -rw-rw-r--  1 satacker satacker    0 Jan 29 10:38 temp_hard_link\\nsatacker@ubuntu:~/Desktop$ cat temp_hard_link \\nHello!\\nsatacker@ubuntu:~/Desktop$\\n```\\nFrom [wikipedia](https://en.wikipedia.org/wiki/Hard_link)\\n![Wikipedia](https://upload.wikimedia.org/wikipedia/commons/3/32/Hard_Link_Illustration.svg)\\n\\n### Users and Groups\\n\\nTODO\\n\\n### Commands\\n\\nTOD\\n\\n### Processes\\n\\n- `ps` lists the processes that are currently running\\n\\n```\\nsatacker@ubuntu:~/Desktop$ ps ax | grep bash\\n   2331 pts/0    Ss+    0:00 bash\\n   5458 pts/2    Ss     0:00 bash\\n  23896 pts/2    S+     0:00 grep --color=auto bash\\n```\\n\\n- We can kill the process using `kill` and then the PID from above. `pkill` allows to kill the process by name.\\n- Processes can be made background , ex. `command &` the & followed by command makes it a background process.\\n- If a foreground process is taking too much time, stop it by pressing Ctrl+Z. A stopped job still exists, but its execution is suspended. To resume the job, but in the background, type `bg` to send the stopped job to background execution. \\n- Linux from the shell supports just one active foreground process per virtual terminal. However, from the practical perspective of the user, a windowed environment (e.g., Linux with a desktop, not from a text-based shell) supports several active windows that effectively serve as multiple simultaneous foreground processes. In practice, Linux behind-the-scenes adjusts the priority of processes in a GUI to promote system stability and support end-user processing. [Source](https://www.lifewire.com/multitasking-background-foreground-process-2180219)\\n\\nimport Comments from \'../src/components/comments/Comments\'\\n\\n----\\n<Comments />\\n----"}]}')}}]);