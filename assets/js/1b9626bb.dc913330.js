"use strict";(self.webpackChunkgsoc_blog=self.webpackChunkgsoc_blog||[]).push([[9918],{3905:function(e,n,t){t.d(n,{Zo:function(){return u},kt:function(){return f}});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=r.createContext({}),c=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},u=function(e){var n=c(e.components);return r.createElement(l.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),d=c(t),f=a,m=d["".concat(l,".").concat(f)]||d[f]||p[f]||i;return t?r.createElement(m,s(s({ref:n},u),{},{components:t})):r.createElement(m,s({ref:n},u))}));function f(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,s=new Array(i);s[0]=d;var o={};for(var l in n)hasOwnProperty.call(n,l)&&(o[l]=n[l]);o.originalType=e,o.mdxType="string"==typeof e?e:a,s[1]=o;for(var c=2;c<i;c++)s[c]=t[c];return r.createElement.apply(null,s)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},9771:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return o},contentTitle:function(){return l},metadata:function(){return c},toc:function(){return u},default:function(){return d}});var r=t(7462),a=t(3366),i=(t(7294),t(3905)),s=["components"],o={},l=void 0,c={type:"mdx",permalink:"/gsoc-logs/week4",source:"@site/src/pages/gsoc-logs/week4.md"},u=[{value:"Sunday, 27th June",id:"sunday-27th-june",children:[{value:"Talking to the shell",id:"talking-to-the-shell",children:[]},{value:"Checking wifi status through IOCTL",id:"checking-wifi-status-through-ioctl",children:[]},{value:"Result Parsing",id:"result-parsing",children:[]}]},{value:"Tuesday, 29nd June",id:"tuesday-29nd-june",children:[{value:"Connmanctl using <code>pipes</code> and writing to .configs",id:"connmanctl-using-pipes-and-writing-to-configs",children:[]}]},{value:"Wednesday, 30th June",id:"wednesday-30th-june",children:[{value:"Reference Example with pipes",id:"reference-example-with-pipes",children:[]}]}],p={toc:u};function d(e){var n=e.components,t=(0,a.Z)(e,s);return(0,i.kt)("wrapper",(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"sunday-27th-june"},"Sunday, 27th June"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Implemented ",(0,i.kt)("inlineCode",{parentName:"li"},"pipe")," for communicating with ",(0,i.kt)("inlineCode",{parentName:"li"},"connmanctl"))),(0,i.kt)("h3",{id:"talking-to-the-shell"},"Talking to the shell"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp",metastring:'title="shell_helper"',title:'"shell_helper"'},'void connman_h::shell_helper(const char* cmd) {\n  result = "";\n  std::array<char, 128> buffer;\n  /* ----------------------------------------------------------------------\n  // This is not thread safe\n  std::unique_ptr<FILE, decltype(&pclose)> pipe(popen(cmd, "r"), pclose);\n  if (!pipe) {\n    throw std::runtime_error("popen() failed!");\n  }\n  while (fgets(buffer.data(), buffer.size(), pipe.get()) != nullptr) {\n    result += buffer.data();\n  }\n   ---------------------------------------------------------------------- */\n  pid_t pid = 0;\n  int pipefd[2];\n  FILE* output;\n\n  pipe(pipefd);  // create a pipe\n  pid = fork();  // span a child process\n  if (pid == 0) {\n    // Child. Let\'s redirect its standard output to our pipe and replace process\n    // with tail\n    close(pipefd[0]);\n    dup2(pipefd[1], STDOUT_FILENO);\n    dup2(pipefd[1], STDERR_FILENO);\n    setvbuf(stdout, NULL, _IOLBF, 1000);\n    execl("/bin/sh", "sh", "-c", cmd, (char*)NULL);\n  }\n\n  // Only parent gets here. Listen to what the tail says\n  close(pipefd[1]);\n  output = fdopen(pipefd[0], "r");\n\n  while (fgets(buffer.data(), buffer.size(), output) != nullptr) {\n    result += buffer.data();\n  }\n  fclose(output);\n}\n')),(0,i.kt)("h3",{id:"checking-wifi-status-through-ioctl"},"Checking wifi status through IOCTL"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp",metastring:'title="Code to check wlan0 interface enabled or disabled"',title:'"Code',to:!0,check:!0,wlan0:!0,interface:!0,enabled:!0,or:!0,'disabled"':!0},'bool connman_h::wifi_status() {\n  int skfd = socket(AF_INET, SOCK_DGRAM, 0);\n\n  if (skfd < 0) {\n    std::cerr << "cannot open socket" << std::endl;\n    return 0;\n  }\n\n  const char* ifname = "wlan0";\n  struct ifreq req;\n\n  strncpy(req.ifr_ifrn.ifrn_name, ifname, IFNAMSIZ);\n\n  int err = ioctl(skfd, SIOCGIFFLAGS, &req);\n  if (err) {\n    perror("SIOCGIFFLAGS");\n    return err;\n  } else {\n    int flags = req.ifr_ifru.ifru_flags;\n    return (flags & IFF_UP) ? true : false;\n  }\n  return 0;\n}\n')),(0,i.kt)("h3",{id:"result-parsing"},"Result Parsing"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp",metastring:'title="Parsing the result"',title:'"Parsing',the:!0,'result"':!0},'void connman_h::get_service_names() {\n  if (!wifi_status()) {\n    /* Enable wifi */\n    shell_helper("connmanctl enable wifi");\n    std::this_thread::sleep_for(std::chrono::seconds(1));\n  }\n\n  /* Scan wifi */\n  shell_helper("connmanctl scan wifi");\n\n  /* Get mac address formatted into continuous string */\n  shell_helper(\n      "cat /sys/class/net/wlan0/address | sed  -r "\n      "\'s/^([^:]{2}):([^:]{2}):([^:]{2}):([^:]{2}):([^:]{2}):([^:]{2})$/"\n      "\\\\1\\\\2\\\\3\\\\4\\\\5\\\\6/\'");\n\n  /* Get macaddress from trailing spaces */\n  auto mac_address = result.substr(0, result.length() - 2);\n\n  /* Get connman services */\n  shell_helper("connmanctl services | sed -e \'s/[ \\t]*//\'");\n\n  /* Temporary string to store wifi_macaddress*/\n  auto temp_start = "wifi_" + mac_address;\n\n  while (true) {\n    /* If length is 0 break */\n    if (result.length() == 0) {\n      break;\n    }\n\n    /* Position of newline character */\n    size_t newline_pos = 1;\n    if (result.find("\\n") != std::string::npos) {\n      newline_pos = result.find("\\n");\n\n      /* Get current line from trimmed sub sequence */\n      auto current_line = reduce(result.substr(0, newline_pos));\n\n      /* Position of wifi_<macaddress> */\n      auto pos = current_line.find(temp_start);\n\n      /* Default check for std::string::npos */\n      if (pos != std::string::npos) {\n        /* pos==0 means that it is hidden and has no name*/\n        if (pos != 0) {\n          auto name = reduce(current_line.substr(0, pos));\n          auto act_pos = name.find("*A");\n          if (act_pos != std::string::npos) {\n            name.erase(act_pos, act_pos + name.find_first_of(" ") + 1);\n            active_name = name;\n          }\n          auto unique_name = current_line.substr(pos);\n          service_names[name] = unique_name;\n        } else {\n          service_names["hidden - " + current_line.substr(0, 10)] =\n              current_line;\n        }\n      } else {\n        std::cerr << "Not finding unique_name" << std::endl;\n      }\n    }\n    result.erase(0, newline_pos + 1);\n  }\n}\n')),(0,i.kt)("h2",{id:"tuesday-29nd-june"},"Tuesday, 29nd June"),(0,i.kt)("h3",{id:"connmanctl-using-pipes-and-writing-to-configs"},"Connmanctl using ",(0,i.kt)("inlineCode",{parentName:"h3"},"pipes")," and writing to .configs"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"I could not get to use dbus but I got the wifi connection working anyway using pipes and .config file writing in /var/lib/connman/wifiname.config"),(0,i.kt)("li",{parentName:"ul"},"I have a working example of dbus and connman in staging from ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/eurogiciel-oss/connman-json-client"},"https://github.com/eurogiciel-oss/connman-json-client")),(0,i.kt)("li",{parentName:"ul"},"This would be done last to keep myself from falling behind schedule."),(0,i.kt)("li",{parentName:"ul"},"Link for current demo (its a hardcoded test for a workaround against using dbus and just using pipes)")),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://asciinema.org/a/422909"},(0,i.kt)("img",{parentName:"a",src:"https://asciinema.org/a/422909.svg",alt:"asciicast"}))),(0,i.kt)("h2",{id:"wednesday-30th-june"},"Wednesday, 30th June"),(0,i.kt)("h3",{id:"reference-example-with-pipes"},"Reference Example with pipes"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Currently the fullscreen mode does not do well with the output")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Scrolling of text doesn't work well here")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("a",{parentName:"p",href:"https://github.com/SAtacker/FTXUI/commit/a2a9ca3b7b57b6d9b3e4509b241558cd7bb590ec"},"Link"),"\n",(0,i.kt)("a",{parentName:"p",href:"https://asciinema.org/a/423106"},(0,i.kt)("img",{parentName:"a",src:"https://asciinema.org/a/423106.svg",alt:"asciicast"})))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"I have a similar problem\n",(0,i.kt)("a",{parentName:"p",href:"https://asciinema.org/a/423111"},(0,i.kt)("img",{parentName:"a",src:"https://asciinema.org/a/423111.svg",alt:"asciicast"}))))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp",metastring:'title="The code that\'s causing this"',title:'"The',code:!0,"that's":!0,causing:!0,'this"':!0},"Element Render() override {\nElements e;\nfor (auto n : connman_interface->get_wifi_names()) {\n    e.push_back(text(to_wstring(n)));\n    e.push_back(separator());\n}\nreturn vbox(e) | flex;\n}\n")))}d.isMDXComponent=!0}}]);