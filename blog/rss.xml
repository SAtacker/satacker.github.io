<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>Shreyas Atre Blog</title>
        <link>https://satacker.github.io/blog</link>
        <description>Shreyas Atre Blog</description>
        <lastBuildDate>Thu, 13 Jan 2022 00:00:00 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[GSoC 2022 Report]]></title>
            <link>https://satacker.github.io/blog/gsoc-2022-work</link>
            <guid>gsoc-2022-work</guid>
            <pubDate>Thu, 13 Jan 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[1. GSoC 2022 Report]]></description>
            <content:encoded><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="1-gsoc-2022-report">1. GSoC 2022 Report<a class="hash-link" href="#1-gsoc-2022-report" title="Direct link to heading">​</a></h2><div align="center"><img loading="lazy" height="70%" width="70%" src="https://developers.google.com/open-source/gsoc/resources/downloads/GSoC-Horizontal.png" alt="GSoC @ HPX, STE||AR Group banner" class="img_ev3q"><img loading="lazy" src="https://raw.githubusercontent.com/STEllAR-GROUP/hpx/master/docs/sphinx/_static/images/HPX_STELLAR.png" alt="GSoC @ HPX, STE||AR Group banner" class="img_ev3q"></div><h2 class="anchor anchorWithStickyNavbar_LWe7" id="2-about-the-project">2. About the project<a class="hash-link" href="#2-about-the-project" title="Direct link to heading">​</a></h2><p><a href="https://summerofcode.withgoogle.com/programs/2022/projects/YXhhTBJw" target="_blank" rel="noopener noreferrer">GSoC Project Acceptance Page</a></p><p>Mentors</p><ul><li>Dr. Hartmut Kaiser</li><li>Giannis Gonidelis</li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="3-objective">3. Objective<a class="hash-link" href="#3-objective" title="Direct link to heading">​</a></h2><p>The main objective of this project was to enable the usage of co_await or to simplify - enable the usage of coroutines with the latest specs of Senders and receivers.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="4-abstract">4. Abstract<a class="hash-link" href="#4-abstract" title="Direct link to heading">​</a></h2><p>HPX being up to date with Std C++ Proposals, Senders/Receivers were implemented as per P2300. But they have been missing coroutine (co_await) integration and minor functionalities as described in P2300 which is likely to be accepted. Hence I plan to implement these functionalities within the Core HPX Library. </p><ul><li>Benefits: <ul><li>Coroutines introduce better async code. For example, it is more readable, local variables have the same lifespan as the coroutine which means we don’t need to worry about allocation/release. </li><li>S/R algorithms can work with coroutines which they cannot as of now unless relied on futures which as mentioned are single-time use. </li><li>Adding co_await support makes the code more structured with respect to concurrency which can also be done by library abstractions of callbacks but using co_await may make it more optimized.</li></ul></li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="5-brief-summary">5. Brief Summary<a class="hash-link" href="#5-brief-summary" title="Direct link to heading">​</a></h2><ul><li><p>Senders, and Receivers</p><ul><li>Because it makes a more consistent programming model considering async programming types i.e. Parallelism and Concurrency. It standardizes the terminologies and execution policies which are more generic and reduce redundancy.</li><li>Coroutines have a direct connection between Senders and Coroutine Awaitables.</li><li>If you are familiar with Eric's <a href="https://www.youtube.com/watch?v=xiaqNvqRB2E" target="_blank" rel="noopener noreferrer">talk on live senders/receivers</a>, you might be comfortable watching <a href="https://viewer.diagrams.net/?tags=%7B%7D&amp;highlight=000000&amp;edit=_blank&amp;layers=1&amp;nav=1&amp;page-id=N1fN19OSE8Ezd9pb87vr&amp;title=sender_receiver#R%3Cmxfile%3E%3Cdiagram%20id%3D%22EqYSzL36J7Lu1Ck5oe2v%22%20name%3D%22Page-1%22%3E5VrBcps6FP0az7SLZpAEGC8TN2kX7XttPXkvXSogA42MPEKuTb%2B%2BIohgIeLSsY1os7HRRULi3HOuriQmaL7aveN4nXxkEaET6ES7CXo7gRAgN5B%2FpaWoLIGDKkPM00hVagyL9AdRRkdZN2lEcq2iYIyKdK0bQ5ZlJBSaDXPOtnq1JaN6r2scE8OwCDE1rf%2BnkUjUW8BpY39P0jipewb%2BrLqzwnVl9SZ5giO23TOh6wmac8ZEdbXazQktwatxqdrdPHP3aWCcZKJPgyW6W37%2BTxBSxPz%2B07dbim9v3nhqbKKoX5hE8v1VkXGRsJhlmF431ivONllEyqc6stTU%2BcDYWhqBNH4jQhTKmXgjmDQlYkXVXTlgXtyV7S%2B8uvhVPe6x8HanlQpVqsZaDvBZCJQpZxsekgPvXVMJ85iIA%2FXgk6MkwwlbETke2Y4TikX6XR8HVlSLn%2Bo13pAXyiG%2F4Rz13O%2BYblRPizAh0YYSfpGrq1evDQ82%2FinB3iapIIs1foRjK0Wq%2B0J1Qbggu8OomiioBshXYlASB55i%2FLYRDKhVkOyJxXfOBZxrldZAI3XD8fPTGvakNbDKa2jymkjouX0me67GZDjrYLLrm0wOzsXkWjZ7WNmg9gkpivpSdGaTosiA%2Fd814bJjlknzQmBBrLMVOo7GVreLrYPGXddA7QsJiXSWlLZPZe9X9%2BVVXF69mrNMpNlGYXozx5Te4%2FDhtVnVOtJAB7ozLHgdQJ8tLNQDGniC26Xibu96b3qTpWZ2Kwv15NbketYmRb9nxLEacHxDOpd5kYVlVzRmPBXJyroMkKvrYGo90QusyMA%2Bpac9Ke3bpPTUoPRI0jwwGxuPZ2OFynPGBhWwu2Vhb20H%2Bi7uXJuiB74N99iAGR0Js2r6iaVyiE1S77eS%2BraQqnGpVi1nPQ3jCP%2BZi%2FO52lpt%2B1VGFaG7IRecPZA5o4xLS8ay0rnLlNKWCdM0zmQxlN6RQQ5dlTEqDTG9VDdWaRQ9MqMrwulsOUGQg0jHHNUxZi%2FI%2BR0xDp1t1Q8MsF9GXgNmPcUHj93A6laf35ruPDiw%2BsxEIC%2F3Gi7kLxcde72%2FyAD0dOEEUnFHt%2BcArUw4I8gHYN%2BJCnqn0Mol57jYq7AuNZAfkFKgM8V3vZavqyeeVD81Js%2Fs24VstaZEkHyEe0w%2BHJ2ypnZnIf1wEAyoLK%2Bnsqxm2vUo97j%2BDxPpsvh7E7X2BpSPTI0MmqghM97Y0MwJuV9D9evlzzOuGuh8xjxqeDHAH7vwPA5480DyhrPHiZ9kkfVZtL21FwS2Z1F04CuO3MBr6Hy%2BlaQBpyOiDoyXefRa7YXaBwvO3NGhZW6y%2F%2BlxsG%2FyhawebiBzpf5igA9sAu8iGziPYL3f3z%2BOTf8gc1lyhcOHN2PIDtqnWSPIDsxz%2F%2FqTGfvzXRsu4EDreAUGXsaHWfaB8%2F0BgZuUCXj9EXm1kdZ8io%2BufwI%3D%3C%2Fdiagram%3E%3Cdiagram%20id%3D%22RS2BbCfXYksCsHZpGadt%22%20name%3D%22Page-2%22%3E7VhNc5swEP01PqYDyGD72Nhpk2nSTutDnVNHhQ2oFYgRcozz67sYYcAysTPj2G7aE%2BzTB9J7b1caemQc5x8lTaM7EQDvOVaQ98ik5zg26Q%2FxUSDLEhlapARCyQLdqQam7Ak0aGl0zgLIWh2VEFyxtA36IknAVy2MSikW7W4Pgre%2FmtIQDGDqU26i31mgIr0LZ1Dj18DCqPqy7Y3KlphWnfVOsogGYtGAyFWPjKUQqnyL8zHwgryKl3Lch47W9cIkJGqfAfkduRGzTzfX4j69AAifbr8GF55em1pWG4YA969DIVUkQpFQflWjl1LMkwCKWS2M6j63QqQI2gj%2BAqWWWkw6VwKhSMVct%2BKC5XKmx6%2BC%2ByJ451bhJG82TpY6KtdaLLCTAg1lYi59eGbflZWoDEE9089dC4UOBxEDrgfHSeBUscf2Oqi2WrjuV6uBL1qQF4ij532kfK6%2F9CUFiR8WCcJTRRUY8tXiFEwvIqZgmtIVFwvM0LYQen6QCvLnKTUp0AMc2ymHLKsE0HZf1NliVykQNTLFs16Jtb7B2jfwAcWSJyerP%2FLOjKzBSfI%2FZ2rWeG9kP0Z18hdBlftnUDPcPWtG%2F5Q1wzXc%2F1ko9sDwDN1UGn2s2sJkSorfMBZcSEQSkRRyPzDONyDKWZhg6COHmFbkssgKhofme90QsyBYeWVbTrX9c4C0IsONGuS4Rlp5W7KKvFZWjfYvQdmCxZwmXVwduP64Voso1zXrj2NtYWoNHv6McwyuMlA%2FMiXSFD2y27P7e1FCxp7oz9VUhfNSwRK12o972XMnxVxYqrKyar0kHfZSptsonXJtqGUTU63RMW1tmxeSQivAa7Zp7H9KKa%2Bt1MgUanBUoaytQpXhf6EaBfDUQhFDqN1X%2FKMeGfaozRjZcmU99pHhme7GS5l6684uzdKp1GCntd2jWntgqDQFvPed2RXoDPzsmNW6%2Bpv11h09%2BJuKtWNef6Z%2BBMGcn9rUm0X6DO71jvkbJusk643ZeodarrvL1sPD2BrD%2Bvfyqq3xk55c%2FQE%3D%3C%2Fdiagram%3E%3Cdiagram%20id%3D%22dfIvOOW6uf5FMUzMlSmy%22%20name%3D%22Page-3%22%3E5VrLcpswFP0az6SLdngYbC9rnDSLpJ0m7fSxyahGASWAGCFiO1%2FfCwgwSNhpJ8aOvTI6CD3OuboP8MB0wuUnhmL%2Fmro4GBiauxyYs4Fh6OZwDD8ZsiqQsWYWgMeIKzrVwC15xgLUBJoSFyeNjpzSgJO4Cc5pFOE5b2CIMbpodrunQXPWGHlYAm7nKJDRH8TlvtiFMarxS0w8v5xZtyfFnRCVncVOEh%2B5dLEGmecD02GU8uIqXDo4yMgreSmeu%2Bi4Wy2M4Yi%2F6IEpir9MnWD29fHq4vnSumb%2B%2FL0QI%2BGrcsPYhf2LJmXcpx6NUHBeo1NG08jF2agatOo%2BV5TGAOoAPmDOV0JMlHIKkM%2FDQNwt5swm6tyKgBKasjnesP7SJBDzMN%2FQz6gIB0vFNMScreA5hgPEyVNzHUiYjFf1q1mFC0HsP5Asxn1CQSpmusXAIAPsAs05ZQQsvK1DzXJG2cInHN%2FGKCdjAUdNxegTZhwvN3Mqc1A%2BMBR2Kg5q2VzUVq%2BXpuyvWbyt7Yg1Q2LtIU34wfGk2%2Fsmaqgk6i4pbWxg2CjMiAhgJdNvVdPjFSNrfCYLEgYowr2QObSbZJoyl4am4LICX51MSyIzgQOKK6hNF%2BydN2lBAfEiuJ4DB8C%2FOc0YIhBRPoobIXHdwpHihDyjP%2FlQmSuNKYl4viFrOrBm2VjgO5PCjWZDJ5zRR%2BzQgMK4s4jmKt2TIGhBL1Om05Y65WqpZVmSWmOFWOautLIlre7BlUbuWjpw0nJZLU%2BlKzyV6nTtTLCRJFilU8tL3bS9lHbWcGowv3bz7sCc1%2F69V6nwGsMM85RFgNEYM0h2aJRThvjR%2B7LRRvXM9uGQnVkV6ns5HGNJOo4ecZ6kzjHkqOy09SqDjdDLluWa9KmWrktyvK3KSQTPrZVThyo9VU5yEaBwY3LscA46y7WN%2FQcKUyI2z3OTOtF1Tsj16B3vB9SxQpH39hsqdLnkqzJfOBPs6PPeLXrZ22N7r4VKOX%2B%2FwQIoZKuf2fMfrLL5SwyXN2bLRmslWq8YZMp8dGuU6RK0pzAjV5LiGDXKjgOrN8bjyd7DyOhUDXv4UsO292rYclGRYH6XN8%2Fq4O6UXWQLf8OBY%2FNhGjcP08RUBHV7R0Ei0RIn9cfk8%2BQu%2Fc5HxJt9%2Ba34SnDTlX316naqV0R7ec2hpEquCur0B8wbMtk4BgdzPLbcbTDdOWuzXtYVqik%2FU%2BzMvuWKoyEaZoweU53xH5INm5JNFIrt6nWtcrWbqowyipy4Yq3CUKGY%2FjqKQbP%2Bq0B%2Bb%2B0PF%2Bb5Xw%3D%3D%3C%2Fdiagram%3E%3Cdiagram%20id%3D%22zS0qvL6dZnKoQc5eDSts%22%20name%3D%22Page-4%22%3E5Vpbc%2BI2FP41zKQP3fEdeFwgadN2p%2BkynSRPGS0W4MRYriwC5Nf3yJZtZAkDGwwJPIGOj2zr%2B3Sucsvuz5a%2FURRPvxEfhy3L8Jcte9CyLNN2OvDDJatM0jHsTDChgS%2BUSsEweMNCaAjpPPBxIikyQkIWxLJwRKIIj5gkQ5SShaw2JqH81BhNsCIYjlCoSu8Dn03FKqx2Kf8dB5Np%2FmTT62ZXZihXFitJpsgnizWRfd2y%2B5QQlv2bLfs45ODluGTzbjZcLV6M4ojtMuHh8Xn%2B9%2F3SuOs9P%2F35z%2Bs3cvvH26%2BCjFcUzsWCxcuyVY4A9gEQMSSUTcmERCi8LqU9SuaRj%2FljDBiVOn8REoPQBOEzZmwl2EVzRkA0ZbNQXM2eyR%2B0cW1ClJA5HeGaBeV7BNEJZjV6VsEAbF1MZpjRFcyjOEQseJXfA4k9NCn0Spjhj0B6D9RNBfX%2BFAURiBaEvigMlPhysBbTgOFhjFIYFmB1OixfMWV4WY%2BmunoxId%2BxwmQdMVyU%2B9%2FMVaZre98zGoLLUuBiUxwpMG0BRkbx8DCZnVPj5G7AyUMzjkUIz%2B8NWxbc3LgppBOWomFcJRjgoXB5PI9GLCDRLwrCySKYhSjC23dhAgbIhL3bxmHwLlxrDrihAm4ZGsAL4eEN2T6FuwS86OqBz%2F%2Fi5sNHcbt0MFhKo5UYHdDNeju62fYp3ayn2APFbE6jhL85WMZTvuUrFMIWZTLiKAwmEfwfAVAwwe7xjRxAlvBVXJgFvp%2BRi5PgDf1Ib8Uxj0kQsXRhbq%2FlDvi9gM8kozazFEpecJ%2BEBO47iEhqXeMgDCuigzgsRzYg11U9lq0xILsp%2B2lrPVbByy6O66ddVAMeyW6f3CN1FUTHNAA411Lk89nu%2B7gccRe3ErQ1McTUMdaYCXQUwoaMAKwgG%2BYRme97EZTPiL0tttWVnZVjapyVe0ymTDVtL0zKkJ3VdzW9khwbZ%2FT7e%2FKrBpyXp8nzj51Offbqs7tjWmRuoOZI5WfnFDCvZa3OXmlrOrrDNIDVc3926FzWdHZlzT0pa47ifirpLIkxRZcVJDqyD2vrgoRz1CChL8LXuTG0iS2EjP6HTm67Ry23Bw%2FD%2F95eZrf3j0%2FP9v2%2FRmzf3OYNjk8bHkxN2axd6HvDQzr1K6VotaYgDLe88x0XlIQ7RoXwbqWhvEXfM%2Bv1Xdep04c%2F2RuX%2B6NY%2BjvsUW0CJHl%2BvW6TCUMMX47f7Faobp%2Fcb6qtgKJwTZuJF8MNkCNxYxqaoNZpiJvN3kiiZrvlHDVUOc4OpYx51FBlqWnAKsY8%2BPOBl0b%2BH7zFlUZ6UUeWPfg0Z6B4hMHbU7VQ%2FLx7f59wl8cNmVtNw6arodZpiln1yFQiS2kEfKysrmoqHyCrU%2Bua0vNj9pTJz9wC7HrSZBNwNMFa590aCwhqz1JiDBKsOIaU%2B7I5qzSaTY3f0p0ON0ZaXYIFpGFKAZaLpqxyNqA7z2%2FqaED7tupZTlq6pIVgHmx462B8fmcDBzA43eFmUyWN9nU9hY8P262oS2G3Nis20HLwrqg%2BdTRUI9mYNPzc9yuWfajUS96h%2BtNi95ipV37gsn6khfi0aoFSYHq15nq437lKpVChGOdfpRi19La%2FyFmaht3jFir5eeU5f5xUV1Bs77JuILTZNmu7I7uBrlffNq3q2%2B6WNmvVzcj6%2B7ZZYVh%2Bo5ypl19629f%2FAw%3D%3D%3C%2Fdiagram%3E%3Cdiagram%20id%3D%22N1fN19OSE8Ezd9pb87vr%22%20name%3D%22Page-5%22%3E7VvRbqM4FP0apO5DKzABkscm7XRWsytVk0ozOy%2BRA07iHYIZY5pkvn5tcEKwTWi7DRklI1URvhgD59x7fH1NLXe0XD9QmC7%2BJhGKLWBHa8u9swAIPI%2F%2FCsNGGgZ%2BaZhTHJUmpzKM8U8kjba05jhCWa0jIyRmOK0bQ5IkKGQ1G6SUrOrdZiSu3zWFc6QZxiGMdesXHLFFae2DoLJ%2FRHi%2B2N7Z8QflmSXcdpZvki1gRFZ7JvfeckeUEFYeLdcjFAvstriU131oOLt7MIoS9pILso%2Ff%2Bt%2B8py%2BD9e0mmz4l9M%2FVj2s5yjOMc%2FnC2SYJJyuImQV8uEwtdxjz4YfjXXMumlcZSiJE%2F5CvxjZbvLIVXsYw4a3haoEZGqcwFKdW3Du4bcGWMW85%2FFDeGVGG1o2v5OyA4g6GyBIxuuFd5AXAk9hK5wKubK8qqkBf2hZ7NAFfGqF0j%2Flu7ApBfiBBfAWgQAOUIpbTJOP4FUBOKT8qMCQpwySBcR3oEtgJRVkes8lhFtSWwgUHltUxhzGeJ%2Fw45AAjyg0Cfsy9%2FVaeWOIoEpcP%2Bf3xTzgthrJ5OyU4YQVY3tDy7sRYOSNZGa9i6IxR8h2NSEz4uHcJKVxghuNYMb2I9mZfbfQF1RUc3RUckyv03sETPj0MJ4%2Fws%2F%2Fp6WHqXvuf8yeQHQ4tO4IMXjZh%2FTphhtB1bANf7tH40kN3O6lwkoqoLCYfS%2BisGss7annghgg%2Fi75qn3ooG8Z4XeQ3jf5bC4Dv1VzLM7iWa3CtwbFcC%2Fi6FjBIhWORFFEo5oHLZiwY1BhzTq4GoK9Rlif4R44mMQm%2F6%2BEXPt%2BI8L8qz46ESHhVTJa%2FAvlgWOYDcgq4iSSuwZ2eS12UB4Be3QN8QyrndDl%2F69NBJfLG2bvT1Nd16nh5BpEDpojZGd8dsJ4G2DIXL3g%2Bbt3sJ83CZis0aSz5XcqaZ8pxIrxdiPATFBfwXjRpbj1%2F6L8wfzgaa3r6MCUkRvCckoY30KSkeY5hyRd0SVOg0YTWIUrPLLt7B6IMc1WnRLkaHSiao7FsEsoWZC4E8b6yDinJ%2BfIskpBXff4iJJUw%2F4sY28gSpmDANOmLGx2e8vlzkZyG6MDzbwuhkM7RG1ihKOZLjuf6c5hALi69pRRu9jpIb6tGfhSGvUTOrk95IPD2CWvt73u2QnD5BBXdu1d5uwfo2f3rVt%2BnTP28gQJw7%2BSp30CDs8LRJrP9Akpx2h5b7i3%2FY2ekiy0lCaeuga4hE9zpYjf1LkcDvwMV5HDRzVdx%2FY3H0yxp%2BKcw2PbOcLeWtyhbm%2F3WI6KYQyB8oTC%2BTVgPVe9bhbV%2FCmH1lBJ3L1A2fFr6b12pqb8%2FCA71P44QO66uxKZa6p4YP%2F1KYuzb6gLPJMZel2Ls6Iu8jBGKCgedIf5moTguKtnVHpTsfj56fMDdGtlURNo3aPSgU43W85QZxXwqLWZUNkGUclwumzNF5UyLi443kvR14G%2FSWkgDJydNr142imZIeBpCxJDTstx%2FNlS2zXXKvlr%2F1PoIPA38jnPYWgbbkr1a71gBkCXB9hKAbab0xanq%2F4sqvXJZk8Jzyzla4qenpBc9Q%2FyY9riOFz%2B2rnpbWq6q7HtUxEDR7cRffHmD4EYtzp884d6%2BhrZXzG1nNkG8SmN269AaYYZqlem7rOP5PNDYKg5vKEpj7rpXRi%2B%2FLMoUoQoM2RnolDNDlQAVn9EJIGRaxuhZzSVv4k1Jqw3a2PEEo6fVCWF4tqm4W2H%2BaEVSfYn70If5vG7fODN%2BFHO8nTNbY%2BRCEu6XloabFr7HrQ27yte0XkutN7DdQ%2F1fW%2BvlzeofGcru1X%2BDuPf%2FAQ%3D%3D%3C%2Fdiagram%3E%3C%2Fmxfile%3E" target="_blank" rel="noopener noreferrer">these diagrams</a>.</li></ul></li><li><p>Futures</p><ul><li>One of the points of S/R is to avoid the allocations associated with futures, also, futures are single-use, whereas S/R, in general, can be used (started) multiple times. - Dr. H. Kaiser</li></ul></li></ul><p>Goal is to enable all Sender CPOs to do the following:</p><ul><li>If we write a sender and pass it to a function which could be a coroutine that could co_await that sender and get its result.</li><li>If they are not generally awaitable then we can await transform them (i.e. make them awaitable).</li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="6-more-context-on">6. More Context on:<a class="hash-link" href="#6-more-context-on" title="Direct link to heading">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="61-coroutines">6.1. Coroutines<a class="hash-link" href="#61-coroutines" title="Direct link to heading">​</a></h3><p>Quoting from the below references:</p><ul><li>Some senders are awaitables</li><li>All awaitables are senders</li><li>When the coroutine is in a suspended state it basically becomes a callback function but we know callbacks are straightforward receivers, then coroutines are receivers and awaitables are senders.</li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="62-senders-and-receivers">6.2. Senders and Receivers<a class="hash-link" href="#62-senders-and-receivers" title="Direct link to heading">​</a></h3><ul><li>Senders are just a lazy value</li><li>Receivers are like callbacks which provide 3 slots<ul><li>set_value</li><li>set_error</li><li>set_stopped</li></ul></li><li>The relationship between these two is that the sender passes the values to the receiver which has 3 specific slots to report to.</li><li>A Scheduler is a handle where these computations will be performed. These produce senders which maybe accepted by the async algorithms.</li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="7-work">7. Work<a class="hash-link" href="#7-work" title="Direct link to heading">​</a></h2><p>My PRs can be found using <a href="https://github.com/STEllAR-GROUP/hpx/pulls?q=is%3Apr+author%3ASAtacker" target="_blank" rel="noopener noreferrer">this</a> link as it'll always be updated.</p><p>Following are the Merged PRs until now:</p><p>Minor Improvements:</p><ul><li><a href="https://github.com/STEllAR-GROUP/hpx/pull/5846" target="_blank" rel="noopener noreferrer">[execution] Add schedule_result_t alias template</a><ul><li>This was a warm-up PR to ensure that I can read the standard reference implementation and can write tests that are necessary.</li></ul></li><li><a href="https://github.com/STEllAR-GROUP/hpx/pull/5865" target="_blank" rel="noopener noreferrer">[hpx::execution] Added forwarding_scheduler_query</a><ul><li>I revised a lot of tag_* mathods especially <a href="https://www.open-std.org/jtc1/sc22/WG21/docs/papers/2019/p1895r0.pdf" target="_blank" rel="noopener noreferrer">tag_invoke</a>. </li><li>Found minor bug in the implementation for it and fixed it <a href="https://github.com/STEllAR-GROUP/hpx/pull/5865/files#diff-c220d96705c8982a255599928a8fce5d89c4d0b54344d7357177bd8c22f5f67f" target="_blank" rel="noopener noreferrer">link</a></li><li>As far as the tests went it was pretty clear that we need to test the CPO using a custo implementation</li></ul></li><li><a href="https://github.com/STEllAR-GROUP/hpx/pull/5920" target="_blank" rel="noopener noreferrer">[P2300] enhancements: receiver_of, sender_of improvements</a><ul><li>A good revision of SFINAE helped me implement the following metafunctions
<code>is_invocable_variant_of_tuples</code>, <code>is_invocable_variant</code></li><li>Added <code>sender_of</code> concept that defines the requirements for a sender type that on successful completion sends the specified set of value types.</li><li>Added <code>receiver_of</code> concept takes a receiver and an instance of the <code>completion_signatures&lt;&gt;</code> class template.</li><li>Tons of tests for all the above.</li></ul></li><li><a href="https://github.com/STEllAR-GROUP/hpx/pull/5945" target="_blank" rel="noopener noreferrer">[P2300] Added fundamental coroutine_traits for S/R</a><ul><li>Firstly I had to modify the C++ compiler check for C++ 20 Coroutines functionality.</li><li>This led to an addition of a new <code>hpx/config/coroutines_support.hpp</code> header.</li><li>An awaiter concept - An Awaiter type is a type that implements the three special methods that are called as part of a co_await expression: await_ready, await_suspend and await_resume.</li><li>An awaitable concept - Something that you can apply the ‘co_await’ operator to. If the promise type defines an await_transform() member then the awaitable is obtained by calling <code>promise.await_transform(value)</code>, passing the awaited value. Simply checks whether the type supports applying the co_await operator to avalue of that type. If the object has either a member or non-member operator co_await() then its return value must satisfy the Awaiter concept. Otherwise, the Awaitable object must satisfy the Awaiter concept itself.</li><li>Tons of tests as usual</li></ul></li></ul><p>Major Work:</p><ol><li>Adapt <code>get_completion_signatures</code> when Sender is a awaitable
This confused me for a while actually. There was a minor bug in the P2300 5th Rev Specification. It did not consider the environment for awaitables i.e. it did not consider the promise type for awaitables. All those awaitables whose promise type defines await_transform would not be considered awaitables and there won't be any completion signatures for them. This led to a further discussion recently with Eric Niebler. I think that it will be revised even further. But for now we can deal with senders that expose a co_await operator.</li><li>Utility <code>as_awaitable_t</code><ul><li><code>receiver_base</code>, <code>sender_awaitable_base</code> </li><li>to transform an object into one that is awaitable within a particular coroutine.</li></ul></li><li>promise base for 5.</li><li>operation base for 5.</li><li>Utility <code>connect_awaitable</code> to adapt <code>connect</code> mentioned in <a href="https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2300r5.html#spec-execution.senders.connect" target="_blank" rel="noopener noreferrer">spec</a> 2.2</li><li>Utility <code>with_awaitable_senders</code>  <ul><li>Used as the base class of a coroutine promise type, makes senders awaitable in that coroutine type</li></ul></li></ol><p><a href="https://github.com/STEllAR-GROUP/hpx/pull/5990" target="_blank" rel="noopener noreferrer">This</a> is the PR for the above work.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="8-future-work">8. Future work<a class="hash-link" href="#8-future-work" title="Direct link to heading">​</a></h2><ul><li>Test these on all the algorithms that returns a sender.</li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="9-extra-contribution">9. Extra Contribution<a class="hash-link" href="#9-extra-contribution" title="Direct link to heading">​</a></h2><ul><li>I discovered a bug in the standard specification of P2300 which is filed as an issue and made a PR to the reference implementation for this issue is currently in progress. <a href="https://github.com/brycelelbach/wg21_p2300_std_execution/pull/602" target="_blank" rel="noopener noreferrer">here</a></li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="10-example-code">10. Example Code<a class="hash-link" href="#10-example-code" title="Direct link to heading">​</a></h2><div class="language-cpp codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-cpp codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">template</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token keyword" style="color:#00009f">typename</span><span class="token plain"> </span><span class="token class-name">T</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">custom_task</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">template</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token keyword" style="color:#00009f">typename</span><span class="token plain"> </span><span class="token class-name">A</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">custom</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">using</span><span class="token plain"> promise_type </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> custom</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">T</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">custom_task</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">default</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">custom_task</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">custom_task</span><span class="token operator" style="color:#393A34">&amp;&amp;</span><span class="token plain"> that</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">noexcept</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">coro_</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">std</span><span class="token double-colon punctuation" style="color:#393A34">::</span><span class="token function" style="color:#d73a49">exchange</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">that</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">coro_</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token operator" style="color:#393A34">~</span><span class="token function" style="color:#d73a49">custom_task</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">coro_</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            coro_</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">destroy</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">explicit</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">custom_task</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        hpx</span><span class="token double-colon punctuation" style="color:#393A34">::</span><span class="token plain">coro</span><span class="token double-colon punctuation" style="color:#393A34">::</span><span class="token plain">coroutine_handle</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">promise_type</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> __coro</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">noexcept</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">coro_</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">__coro</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">final_awaitable</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">static</span><span class="token plain"> std</span><span class="token double-colon punctuation" style="color:#393A34">::</span><span class="token plain">false_type </span><span class="token function" style="color:#d73a49">await_ready</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">noexcept</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">static</span><span class="token plain"> hpx</span><span class="token double-colon punctuation" style="color:#393A34">::</span><span class="token plain">coro</span><span class="token double-colon punctuation" style="color:#393A34">::</span><span class="token plain">coroutine_handle</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">await_suspend</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            hpx</span><span class="token double-colon punctuation" style="color:#393A34">::</span><span class="token plain">coro</span><span class="token double-colon punctuation" style="color:#393A34">::</span><span class="token plain">coroutine_handle</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">promise_type</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> h</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">noexcept</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> h</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">promise</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">continuation</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">static</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">void</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">await_resume</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">noexcept</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">template</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token keyword" style="color:#00009f">typename</span><span class="token plain"> </span><span class="token class-name">A</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">custom</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token base-clause">hpx</span><span class="token base-clause double-colon punctuation" style="color:#393A34">::</span><span class="token base-clause">execution</span><span class="token base-clause double-colon punctuation" style="color:#393A34">::</span><span class="token base-clause">experimental</span><span class="token base-clause double-colon punctuation" style="color:#393A34">::</span><span class="token base-clause class-name">with_awaitable_senders</span><span class="token base-clause operator" style="color:#393A34">&lt;</span><span class="token base-clause class-name">custom</span><span class="token base-clause operator" style="color:#393A34">&lt;</span><span class="token base-clause class-name">T</span><span class="token base-clause operator" style="color:#393A34">&gt;&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        custom_task </span><span class="token function" style="color:#d73a49">get_return_object</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">noexcept</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">custom_task</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                hpx</span><span class="token double-colon punctuation" style="color:#393A34">::</span><span class="token plain">coro</span><span class="token double-colon punctuation" style="color:#393A34">::</span><span class="token class-name">coroutine_handle</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">promise_type</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token double-colon punctuation" style="color:#393A34">::</span><span class="token function" style="color:#d73a49">from_promise</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">*</span><span class="token keyword" style="color:#00009f">this</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        hpx</span><span class="token double-colon punctuation" style="color:#393A34">::</span><span class="token plain">coro</span><span class="token double-colon punctuation" style="color:#393A34">::</span><span class="token plain">suspend_always </span><span class="token function" style="color:#d73a49">initial_suspend</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">noexcept</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        final_awaitable </span><span class="token function" style="color:#d73a49">final_suspend</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">noexcept</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">void</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">unhandled_exception</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">void</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">return_value</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">T value</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">noexcept</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            data_</span><span class="token punctuation" style="color:#393A34">.</span><span class="token keyword" style="color:#00009f">template</span><span class="token plain"> </span><span class="token generic-function function" style="color:#d73a49">emplace</span><span class="token generic-function generic class-name operator" style="color:#393A34">&lt;</span><span class="token generic-function generic class-name number" style="color:#36acaa">1</span><span class="token generic-function generic class-name operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">std</span><span class="token double-colon punctuation" style="color:#393A34">::</span><span class="token function" style="color:#d73a49">move</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">value</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        std</span><span class="token double-colon punctuation" style="color:#393A34">::</span><span class="token plain">variant</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">std</span><span class="token double-colon punctuation" style="color:#393A34">::</span><span class="token plain">monostate</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> T</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> std</span><span class="token double-colon punctuation" style="color:#393A34">::</span><span class="token plain">exception_ptr</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> data_</span><span class="token punctuation" style="color:#393A34">{</span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        custom_task context_</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">template</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token keyword" style="color:#00009f">typename</span><span class="token plain"> </span><span class="token class-name">ParentPromise</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">void</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">task_awaitable</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        hpx</span><span class="token double-colon punctuation" style="color:#393A34">::</span><span class="token plain">coro</span><span class="token double-colon punctuation" style="color:#393A34">::</span><span class="token plain">coroutine_handle</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">promise_type</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> coro_</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        std</span><span class="token double-colon punctuation" style="color:#393A34">::</span><span class="token plain">optional</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">custom</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">ParentPromise</span><span class="token operator" style="color:#393A34">&gt;&gt;</span><span class="token plain"> context_</span><span class="token punctuation" style="color:#393A34">{</span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">static</span><span class="token plain"> std</span><span class="token double-colon punctuation" style="color:#393A34">::</span><span class="token plain">false_type </span><span class="token function" style="color:#d73a49">await_ready</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">noexcept</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">template</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token keyword" style="color:#00009f">typename</span><span class="token plain"> </span><span class="token class-name">ParentPromise2</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        hpx</span><span class="token double-colon punctuation" style="color:#393A34">::</span><span class="token plain">coro</span><span class="token double-colon punctuation" style="color:#393A34">::</span><span class="token plain">coroutine_handle</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">await_suspend</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            hpx</span><span class="token double-colon punctuation" style="color:#393A34">::</span><span class="token plain">coro</span><span class="token double-colon punctuation" style="color:#393A34">::</span><span class="token plain">coroutine_handle</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">ParentPromise2</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> parent</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">noexcept</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            coro_</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">promise</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">set_continuation</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">parent</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> coro_</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        T </span><span class="token function" style="color:#d73a49">await_resume</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            context_</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">reset</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">coro_</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">promise</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">data_</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">index</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">2</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                std</span><span class="token double-colon punctuation" style="color:#393A34">::</span><span class="token function" style="color:#d73a49">rethrow_exception</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                    std</span><span class="token double-colon punctuation" style="color:#393A34">::</span><span class="token generic-function function" style="color:#d73a49">get</span><span class="token generic-function generic class-name operator" style="color:#393A34">&lt;</span><span class="token generic-function generic class-name number" style="color:#36acaa">2</span><span class="token generic-function generic class-name operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">std</span><span class="token double-colon punctuation" style="color:#393A34">::</span><span class="token function" style="color:#d73a49">move</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">coro_</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">promise</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">data_</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">constexpr</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">!</span><span class="token plain">std</span><span class="token double-colon punctuation" style="color:#393A34">::</span><span class="token plain">is_void_v</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">T</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> std</span><span class="token double-colon punctuation" style="color:#393A34">::</span><span class="token generic-function function" style="color:#d73a49">get</span><span class="token generic-function generic class-name operator" style="color:#393A34">&lt;</span><span class="token generic-function generic class-name number" style="color:#36acaa">1</span><span class="token generic-function generic class-name operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">std</span><span class="token double-colon punctuation" style="color:#393A34">::</span><span class="token function" style="color:#d73a49">move</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">coro_</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">promise</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">data_</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">friend</span><span class="token plain"> task_awaitable</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">operator</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">co_await</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">custom_task</span><span class="token operator" style="color:#393A34">&amp;&amp;</span><span class="token plain"> self</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">noexcept</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> task_awaitable</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain">std</span><span class="token double-colon punctuation" style="color:#393A34">::</span><span class="token function" style="color:#d73a49">exchange</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">self</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">coro_</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">template</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token keyword" style="color:#00009f">typename</span><span class="token plain"> </span><span class="token class-name">ParentPromise</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">friend</span><span class="token plain"> task_awaitable</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">ParentPromise</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">tag_invoke</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        hpx</span><span class="token double-colon punctuation" style="color:#393A34">::</span><span class="token plain">execution</span><span class="token double-colon punctuation" style="color:#393A34">::</span><span class="token plain">experimental</span><span class="token double-colon punctuation" style="color:#393A34">::</span><span class="token plain">as_awaitable_t</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> custom_task</span><span class="token operator" style="color:#393A34">&amp;&amp;</span><span class="token plain"> self</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        ParentPromise</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">noexcept</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> task_awaitable</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">ParentPromise</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain">std</span><span class="token double-colon punctuation" style="color:#393A34">::</span><span class="token function" style="color:#d73a49">exchange</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">self</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">coro_</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    hpx</span><span class="token double-colon punctuation" style="color:#393A34">::</span><span class="token plain">coro</span><span class="token double-colon punctuation" style="color:#393A34">::</span><span class="token plain">coroutine_handle</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">promise_type</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> coro_</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">template</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token keyword" style="color:#00009f">typename</span><span class="token plain"> </span><span class="token class-name">S1</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">typename</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> std</span><span class="token double-colon punctuation" style="color:#393A34">::</span><span class="token plain">enable_if_t</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">hpx</span><span class="token double-colon punctuation" style="color:#393A34">::</span><span class="token plain">execution</span><span class="token double-colon punctuation" style="color:#393A34">::</span><span class="token plain">experimental</span><span class="token double-colon punctuation" style="color:#393A34">::</span><span class="token plain">is_sender_v</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">S1</span><span class="token operator" style="color:#393A34">&gt;&gt;</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">custom_task</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token keyword" style="color:#00009f">int</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">async_answer_custom</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">S1 s1</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// Senders are implicitly awaitable (in this coroutine type):</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">co_return</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">co_await</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">S1 </span><span class="token operator" style="color:#393A34">&amp;&amp;</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> s1</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><div class="language-cpp codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-cpp codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">try</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// Awaitables are implicitly senders:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">auto</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> hpx</span><span class="token double-colon punctuation" style="color:#393A34">::</span><span class="token plain">this_thread</span><span class="token double-colon punctuation" style="color:#393A34">::</span><span class="token plain">experimental</span><span class="token double-colon punctuation" style="color:#393A34">::</span><span class="token function" style="color:#d73a49">sync_wait</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token function" style="color:#d73a49">async_answer_custom</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">hpx</span><span class="token double-colon punctuation" style="color:#393A34">::</span><span class="token plain">execution</span><span class="token double-colon punctuation" style="color:#393A34">::</span><span class="token plain">experimental</span><span class="token double-colon punctuation" style="color:#393A34">::</span><span class="token function" style="color:#d73a49">just</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">42</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                     </span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">value</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        std</span><span class="token double-colon punctuation" style="color:#393A34">::</span><span class="token plain">cout </span><span class="token operator" style="color:#393A34">&lt;&lt;</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"The answer is "</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&lt;&lt;</span><span class="token plain"> hpx</span><span class="token double-colon punctuation" style="color:#393A34">::</span><span class="token generic-function function" style="color:#d73a49">get</span><span class="token generic-function generic class-name operator" style="color:#393A34">&lt;</span><span class="token generic-function generic class-name number" style="color:#36acaa">0</span><span class="token generic-function generic class-name operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&lt;&lt;</span><span class="token plain"> </span><span class="token char">'\n'</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">catch</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">std</span><span class="token double-colon punctuation" style="color:#393A34">::</span><span class="token plain">exception</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain"> e</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        std</span><span class="token double-colon punctuation" style="color:#393A34">::</span><span class="token plain">cout </span><span class="token operator" style="color:#393A34">&lt;&lt;</span><span class="token plain"> e</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">what</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&lt;&lt;</span><span class="token plain"> </span><span class="token char">'\n'</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h2 class="anchor anchorWithStickyNavbar_LWe7" id="11-references">11. References<a class="hash-link" href="#11-references" title="Direct link to heading">​</a></h2><ul><li><p><a href="https://wg21.link/P2300" target="_blank" rel="noopener noreferrer">P2300</a></p></li><li><p><a href="https://github.com/brycelelbach/wg21_p2300_std_execution" target="_blank" rel="noopener noreferrer">the reference implementation</a></p></li><li><p><a href="https://github.com/facebookexperimental/libunifex" target="_blank" rel="noopener noreferrer">libunifex</a></p></li><li><p><a href="https://github.com/STEllAR-GROUP/hpx/issues/5045" target="_blank" rel="noopener noreferrer">HPX main P2300 Issue</a></p></li><li><p>Talks</p><ul><li>"A Tour of C++ Executors, Part 1": <a href="https://www.youtube.com/watch?v=xLboNIf7BTg" target="_blank" rel="noopener noreferrer">https://www.youtube.com/watch?v=xLboNIf7BTg</a></li><li>"A Tour of C++ Executors, Part 2": <a href="https://www.youtube.com/watch?v=6a0zzUBUNW4" target="_blank" rel="noopener noreferrer">https://www.youtube.com/watch?v=6a0zzUBUNW4</a></li><li>"Live-coding sender/receiver": <a href="https://www.youtube.com/watch?v=xiaqNvqRB2E" target="_blank" rel="noopener noreferrer">https://www.youtube.com/watch?v=xiaqNvqRB2E</a></li><li>"A Unifying Abstraction for Async in C++": <a href="https://www.youtube.com/watch?v=tF-Nz4aRWAM" target="_blank" rel="noopener noreferrer">https://www.youtube.com/watch?v=tF-Nz4aRWAM</a></li><li>"Structured Concurrency": <a href="https://www.youtube.com/watch?v=Xq2IMOPjPs0" target="_blank" rel="noopener noreferrer">https://www.youtube.com/watch?v=Xq2IMOPjPs0</a></li><li>"Structured Networking": <a href="https://www.youtube.com/watch?v=nmQgVVQCFu4" target="_blank" rel="noopener noreferrer">https://www.youtube.com/watch?v=nmQgVVQCFu4</a></li><li>"C++ Standard Parallelism": <a href="https://www.youtube.com/watch?v=r1COmv0CdW4" target="_blank" rel="noopener noreferrer">https://www.youtube.com/watch?v=r1COmv0CdW4</a> </li></ul></li></ul><div style="width:100%" id="comments"><div></div></div>]]></content:encoded>
            <category>GSoC</category>
            <category>C++</category>
            <category>HPX</category>
        </item>
        <item>
            <title><![CDATA[DBus Cross-compilation]]></title>
            <link>https://satacker.github.io/blog/dbus-crossc</link>
            <guid>dbus-crossc</guid>
            <pubDate>Wed, 23 Jun 2021 00:00:00 GMT</pubDate>
            <description><![CDATA[I have made a curated content on DBus cross-compilation on Ubuntu 20.04]]></description>
            <content:encoded><![CDATA[<p>I have made a curated content on DBus cross-compilation on Ubuntu 20.04</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="cross-compilation-tools">Cross-compilation tools<a class="hash-link" href="#cross-compilation-tools" title="Direct link to heading">​</a></h2><ul><li>Go through the best guide <a href="https://www.reddit.com/r/BeagleBone/comments/du4lwb/guide_cross_compiling_for_the_beaglebone_black_on/" target="_blank" rel="noopener noreferrer">here</a></li></ul><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">gcc-arm-linux-gnueabi:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  Installed: (none)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  Candidate: 4:9.3.0-1ubuntu2</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  Version table:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     4:9.3.0-1ubuntu2 500</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        500 http://in.archive.ubuntu.com/ubuntu focal/universe amd64 Packages</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">binutils-arm-linux-gnueabi:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  Installed: 2.34-6ubuntu1.1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  Candidate: 2.34-6ubuntu1.1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  Version table:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> *** 2.34-6ubuntu1.1 500</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        500 http://in.archive.ubuntu.com/ubuntu focal-updates/universe amd64 Packages</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        500 http://security.ubuntu.com/ubuntu focal-security/universe amd64 Packages</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        100 /var/lib/dpkg/status</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     2.34-6ubuntu1 500</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        500 http://in.archive.ubuntu.com/ubuntu focal/universe amd64 Packages</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h2 class="anchor anchorWithStickyNavbar_LWe7" id="installing-dbus-for-arm-linux-gnueabi">Installing DBus for <code>arm-linux-gnueabi</code><a class="hash-link" href="#installing-dbus-for-arm-linux-gnueabi" title="Direct link to heading">​</a></h2><ul><li>Note: The low-level libdbus reference library has no required dependencies; the reference bus daemon's only required dependency is an XML parser (expat).</li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="1-installing-expat">1. Installing <code>expat</code><a class="hash-link" href="#1-installing-expat" title="Direct link to heading">​</a></h3><ul><li>Currently <code>expat 2.4.1</code> is stable</li><li>Download <code>expat 2.4.1</code> and <code>tar xvfz expat-2.4.1.tar.gz</code></li><li>Configure expat</li></ul><div class="language-sh codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-sh codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">./configure  --without-tests --without-examples --prefix=/usr/arm-linux-gnueabi/ --host=arm-linux-gnueabi CC=/usr/bin/arm-linux-gnueabi-gcc-8 CXX=/usr/bin/arm-linux-gnueabi-g++-8</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">make -j8</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">sudo make install</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="2-installing-libdbus">2. Installing <code>libdbus</code><a class="hash-link" href="#2-installing-libdbus" title="Direct link to heading">​</a></h3><ul><li>Once completed download <code>dbus</code> from <a href="https://dbus.freedesktop.org/releases/dbus/" target="_blank" rel="noopener noreferrer">here</a></li><li>Currently <code>1.12.x</code> are the stable ones</li><li><code>tar xvfz dbus-1.12.20.tar.gz</code></li></ul><div class="language-sh codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-sh codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">./configure --disable-doxygen-docs --disable-xml-docs --exec-prefix=/usr/arm-linux-gnueabi --host=arm-linux-gnueabi CC=/usr/bin/arm-linux-gnueabi-gcc-8 CXX=/usr/bin/arm-linux-gnueabi-g++-8 CFLAGS=-I/usr/arm-linux-gnueabi/include LDFLAGS=-L/usr/arm-linux-gnueabi/lib/ LIBS=-lexpat</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">make -j8</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">sudo make install</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h2 class="anchor anchorWithStickyNavbar_LWe7" id="other-useful-links">Other Useful Links<a class="hash-link" href="#other-useful-links" title="Direct link to heading">​</a></h2><ul><li>DBus with Connman - <a href="https://gist.github.com/tranthamp/2721326" target="_blank" rel="noopener noreferrer">Link</a></li></ul><div class="language-sh codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-sh codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain"># Connman Technology API examples: (Object Path: /net/connman/technology/&lt;wifi/ethernet&gt;, Interface: net.connman.Technology)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># GetProperties</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">dbus-send --system --dest=net.connman --print-reply /net/connman/technology/wifi net.connman.Technology.GetProperties</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># Scan</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">dbus-send --system --dest=net.connman --print-reply /net/connman/technology/wifi net.connman.Technology.Scan</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># Disable/Enable wifi</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">dbus-send --system --dest=net.connman --print-reply /net/connman/technology/wifi net.connman.Technology.SetProperty string:Powered variant:boolean:true</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># Disable/Enable ethernet</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">dbus-send --system --dest=net.connman --print-reply /net/connman/technology/ethernet net.connman.Technology.SetProperty string:Powered variant:boolean:true</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># Connman Manager API examples: (Object Path: /, Interface: net.connman.Manager)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">dbus-send --system --dest=net.connman --print-reply / net.connman.Manager.GetProperties</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">dbus-send --system --dest=net.connman --print-reply / net.connman.Manager.GetTechnologies</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">dbus-send --system --dest=net.connman --print-reply / net.connman.Manager.GetServices</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># See: http://git.kernel.org/?p=network/connman/connman.git;a=tree;f=doc;hb=HEAD</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><div class="theme-admonition theme-admonition-info alert alert--info admonition_LlT9"><div class="admonitionHeading_tbUL"><span class="admonitionIcon_kALy"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"></path></svg></span>info</div><div class="admonitionContent_S0QG"><ul><li>The best way to get to know dbus is from their own tutorial <a href="https://dbus.freedesktop.org/doc/dbus-tutorial.html" target="_blank" rel="noopener noreferrer">here</a>.</li><li><a href="https://github.com/makercrew/dbus-sample" target="_blank" rel="noopener noreferrer">This</a> has done a great job of giving an overview of the API to get yourself quickly started.</li></ul></div></div><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="comments-"><div style="width:100%" id="comments"><div></div></div><a class="hash-link" href="#comments-" title="Direct link to heading">​</a></h2>]]></content:encoded>
            <category>dbus</category>
            <category>linux</category>
            <category>ipc</category>
            <category>beagle</category>
        </item>
        <item>
            <title><![CDATA[Hello]]></title>
            <link>https://satacker.github.io/blog/hello-world</link>
            <guid>hello-world</guid>
            <pubDate>Tue, 08 Jun 2021 00:00:00 GMT</pubDate>
            <description><![CDATA[Welcome to this blog. This blog is created with Docusaurus 2 alpha.]]></description>
            <content:encoded><![CDATA[<p>Welcome to this blog. This blog is created with <a href="https://docusaurus.io/" target="_blank" rel="noopener noreferrer"><strong>Docusaurus 2 alpha</strong></a>.</p><p>This is a test post.</p><p>A whole bunch of other information.</p><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="comments-"><div style="width:100%" id="comments"><div></div></div><a class="hash-link" href="#comments-" title="Direct link to heading">​</a></h2>]]></content:encoded>
            <category>hello</category>
            <category>docusaurus</category>
        </item>
        <item>
            <title><![CDATA[Pre-Coding Period]]></title>
            <link>https://satacker.github.io/blog/pre-coding</link>
            <guid>pre-coding</guid>
            <pubDate>Wed, 21 Apr 2021 00:00:00 GMT</pubDate>
            <description><![CDATA[Points to note]]></description>
            <content:encoded><![CDATA[<h3 class="anchor anchorWithStickyNavbar_LWe7" id="points-to-note">Points to note<a class="hash-link" href="#points-to-note" title="Direct link to heading">​</a></h3><ul><li>Interface Namings<ul><li>It is of my knowledge that the USB CDC ECM class interfaces are Predictable <a href="https://cgit.freedesktop.org/systemd/systemd/tree/src/udev/udev-builtin-net_id.c##n20" target="_blank" rel="noopener noreferrer">source 1</a>, <a href="https://www.freedesktop.org/wiki/Software/systemd/PredictableNetworkInterfaceNames/" target="_blank" rel="noopener noreferrer">source 2</a></li><li>Windows vs Unix Like </li></ul></li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="disclaimer">Disclaimer<a class="hash-link" href="#disclaimer" title="Direct link to heading">​</a></h3><p>Currently, it's the review period till May 17th. I have started looking at some basic points I need to make concrete decisions about as I go ahead. Even if my selection does not happen due to misfortune these readings will only benefit next time or whoever carries it on.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="the-why-section">The Why Section<a class="hash-link" href="#the-why-section" title="Direct link to heading">​</a></h3><ol><li>Interface namings are necessary to let the (Host Application) beagle-config know which one is the beagle device. After getting to know the interface name system calls to set rules in iptables can be executed. This would completely eliminate any CLI usage. Basically, users would have to just plugin the beagle device and everything will be taken care of. (Note - This is just the beginning)</li></ol><h3 class="anchor anchorWithStickyNavbar_LWe7" id="the-how-section">The How Section<a class="hash-link" href="#the-how-section" title="Direct link to heading">​</a></h3><ol><li></li></ol><ul><li>High-Level overview - Since Udev rules decide the interface name in Linux it would just be of the sort <code>enx78e7d1ea46da</code> which is essentially incorporating the MAC address of the beagle device. On windows there's just usual ICS without lowlevel configurations.</li><li>Low-Level Windows - A simple PowerShell script could do it
A simple PowerShell script from <a href="https://superuser.com/questions/470319/how-to-enable-internet-connection-sharing-using-command-line" target="_blank" rel="noopener noreferrer">here</a> could do it.</li></ul><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain"> # Register the HNetCfg library (once)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">regsvr32 hnetcfg.dll</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># Create a NetSharingManager object</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$m = New-Object -ComObject HNetCfg.HNetShare</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># List connections</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$m.EnumEveryConnection |% { $m.NetConnectionProps.Invoke($_) }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># Find connection</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$c = $m.EnumEveryConnection |? { $m.NetConnectionProps.Invoke($_).Name -eq "Ethernet" }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># Get sharing configuration</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$config = $m.INetSharingConfigurationForINetConnection.Invoke($c)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># See if sharing is enabled</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Write-Output $config.SharingEnabled</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># See the role of connection in sharing</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># 0 - public, 1 - private</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># Only meaningful if SharingEnabled is True</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Write-Output $config.SharingType</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># Enable sharing (0 - public, 1 - private)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$config.EnableSharing(0)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># Disable sharing</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$config.DisableSharing()</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><ul><li>Low-Level Linux- We would look for the default ip-address of beagle devices. Get the interface name and then use iptables to set packet filter rules for ICS. </li></ul><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">// look which interface contains the wanted IP.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">// When found, ifa-&gt;ifa_name contains the name of the interface (eth0, eth1, ppp0...)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">for (ifa = ifaddr; ifa != NULL; ifa = ifa-&gt;ifa_next)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">{</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    if (ifa-&gt;ifa_addr)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        if (AF_INET == ifa-&gt;ifa_addr-&gt;sa_family)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            struct sockaddr_in* inaddr = (struct sockaddr_in*)ifa-&gt;ifa_addr;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            if (inaddr-&gt;sin_addr.s_addr == addr.sin_addr.s_addr)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                if (ifa-&gt;ifa_name)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                    // Found it</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">freeifaddrs(ifaddr);</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><ul><li>Further things would be added as the time flows and exams are over till May Mid.</li></ul><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="comments-"><div style="width:100%" id="comments"><div></div></div><a class="hash-link" href="#comments-" title="Direct link to heading">​</a></h2>]]></content:encoded>
            <category>gsoc</category>
            <category>beagle-config</category>
        </item>
        <item>
            <title><![CDATA[Beaglebone & Linux]]></title>
            <link>https://satacker.github.io/blog/linux_beagle</link>
            <guid>linux_beagle</guid>
            <pubDate>Fri, 29 Jan 2021 00:00:00 GMT</pubDate>
            <description><![CDATA[I have made a curated content on linux and beaglebone]]></description>
            <content:encoded><![CDATA[<p>I have made a curated content on linux and beaglebone</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="boot">Boot<a class="hash-link" href="#boot" title="Direct link to heading">​</a></h2><p>Power On</p><ol><li><p>(First Stage bootloader) TI Boot ROM performs minimal congfig, finds boot image and loads x-loader</p><ul><li>This bootloader initializes a minimal amount of CPU and board hardware, then accesses the first partition of the SD card (which must be in FAT format), and loads a file called "MLO", and executes it.</li></ul></li><li><p>(Second Stage bootloader) MLO "Mmc LOader" on the FAT partition is the second stage bootloader</p><ul><li>Sets up pin muxing initializes clocks and memory and loads U boot</li></ul></li><li><p>(Third Stage ) U-Boot is Das-Universal Boot , u-boot.img on FAT</p><ul><li>Specifies root file system and uses uEnv.txt config , performs additional inits, loads Linux Kernel and passes control</li><li>The uenvcmd from uEnv.txt file is executed.</li><li>The file /dtbs/am335x‐bone<em>device_name</em>.dtb is read in. This file contains the BBB’s compiled device tree description, which is discussed shortly. After this description is read in, the flattened device tree blob is placed in memory at the address 0x815f0000</li></ul></li><li><p>Linux Kernel (EXT4 partition on SD card)</p><ul><li>Decompresses kernel into memory and sets up I2C , USB, etc. and mounts file system containing linux applications i.e mounts the root file system ( mmcroot and mmcrootfstype are defined in uEnv.txt )</li><li>Calls userspace process init</li></ul></li></ol><h2 class="anchor anchorWithStickyNavbar_LWe7" id="kernel-space-and-user-space">Kernel Space and User Space<a class="hash-link" href="#kernel-space-and-user-space" title="Direct link to heading">​</a></h2><ul><li>Kernel space is the area of system memory where Linux kernel runs and is separated from user space to provide better security and helps to avoid crashing due to badly written user code.</li></ul><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">    ---------------------------------------------</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    |               User space                  |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    |  /sbin/init UserCode LinuxConsole         |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    |            GNU C lib (glib)               |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    ---------------------------------------------</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                        ||</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                        \/</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                    Kernel space</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                        ||</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                        \/</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                    Hardware &amp; Devices</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><ul><li>A kernel module is an object file that contains code, which can be loaded and unloaded from the kernel on demand. In many cases the kernel can even load and unload modules while it is executing, without needing to reboot the BBB.</li><li>Example : When we add wifi module it uses LKM (loadable kernel module)</li><li>Further kernel services are made available through system calls</li><li>System V init or systemd manages these systems and services, can be used to start and stop them</li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="init-process">Init process<a class="hash-link" href="#init-process" title="Direct link to heading">​</a></h3><ul><li>Begins by reading config from /etc/inittab which defines runlevel</li><li>Runlevel defines the state of device and controls which process and services are started by init</li><li>In debian there are several runlevels from 0-6 </li></ul><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">satacker@ubuntu:~/Desktop/beagle_notes$ who -r</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">         run-level 5  2021-01-14 22:00</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">satacker@ubuntu:~/Desktop/beagle_notes$ runlevel</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">N 5</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">satacker@ubuntu:/etc$ ls -d rc*</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">rc0.d  rc1.d  rc2.d  rc3.d  rc4.d  rc5.d  rc6.d  rcS.d</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h2 class="anchor anchorWithStickyNavbar_LWe7" id="linux-system-management">Linux System Management<a class="hash-link" href="#linux-system-management" title="Direct link to heading">​</a></h2><p>Here we see the full administrative control.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="super-user">Super user<a class="hash-link" href="#super-user" title="Direct link to heading">​</a></h3><ul><li>The root account or superuser has access to all the commands and files</li><li><code>sudo</code> stands for superuser-do</li><li>For ex. Not using <code>sudo</code> prevents from accedentally deleting files</li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="file-system">File System<a class="hash-link" href="#file-system" title="Direct link to heading">​</a></h3><ul><li>File system is a hierarchy of directories</li><li>Uses <code>inodes</code> to represent the file system objects such as files and directories themselves</li><li>For ex. when an extended file system is created (ext3/ext4) on a physical disk an inode table is created. The table links to an inode data structure for each file and directory on that disk</li></ul><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">debian@beaglebone:~/ws$ ls -ail</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">total 268</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   26 drwxr-xr-x 2 debian debian   4096 Jan 29 01:12 .</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">44132 drwxr-xr-x 6 debian debian   4096 Jan 28 23:53 ..</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> 2434 -rwxr-xr-x 1 debian debian   3732 Jan 29 01:04 a.pru0</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  827 -rwxr-xr-x 1 debian debian    504 Nov 13 03:32 init_script.sh</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> 1244 -rw-r--r-- 1 debian debian    512 Jan 29 00:59 pru_ex_calculator.sim</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  958 -rw-r--r-- 1 debian debian    100 Jan 29 00:57 pru_ex_counter.sim</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> 1020 -rw-r--r-- 1 debian debian    119 Jan 29 01:04 pru_ex.sim</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  916 -rw-r--r-- 1 debian debian 245510 Aug 25 01:55 simppru-1.3-armhf.deb</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><ul><li><code>drwxr-xr-x</code> where <code>d</code> represents directory , could have been <code>l</code> for symlink and <code>-</code> for regular file, <code>c</code> for character special, <code>b</code> for block special, <code>p</code> for fifo and <code>s</code> for socket. The rest <code>rwxr-xr-x</code> represents file system permissions namely <code>r</code>ead, <code>w</code>rite and e<code>x</code>ecute.</li><li>Weightings - r = 4 , w = 2 , x = 1 i.e. <code>rwxrwxrwx</code> corresponds to 777</li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="linking-to-files-and-dirs">Linking to files and dirs<a class="hash-link" href="#linking-to-files-and-dirs" title="Direct link to heading">​</a></h3><ul><li>A soft link refers to location of another file/directory</li><li>ex. </li></ul><div class="language-debian@beaglebone:/usr/local/bin$ codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-debian@beaglebone:/usr/local/bin$ codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">pyctrl_start_server  simppru      simppru-console</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">pyctrl_stop_server   simppru-1.3  simppru-console-1.3</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>all the simppru refer to the same binary </p><ul><li>This can be verified as follows</li></ul><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">debian@beaglebone:/usr/local/bin$ ls -l</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">total 792</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">-rwxr-xr-x 1 root root    190 Apr  6  2020 pyctrl_start_server</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">-rwxr-xr-x 1 root root    188 Apr  6  2020 pyctrl_stop_server</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">lrwxrwxrwx 1 root root     11 Aug 25 01:55 simppru -&gt; simppru-1.3</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">-rwxr-xr-x 1 root root 118996 Aug 25 01:53 simppru-1.3</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">lrwxrwxrwx 1 root root     19 Aug 25 01:55 simppru-console -&gt; simppru-console-1.3</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">-rwxr-xr-x 1 root root 677248 Aug 25 01:54 simppru-console-1.3</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><ul><li>Hardlinks refer to the inode of the file , always refer to the source even if the file is removed</li></ul><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">satacker@ubuntu:~/Desktop$ cat test.test </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Hello!</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">satacker@ubuntu:~/Desktop$ cat temp_hard_link </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Hello!</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">satacker@ubuntu:~/Desktop$ </span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">satacker@ubuntu:~/Desktop$ ls -ail | grep "test\|temp_" </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">4202899 -rw-rw-r--  2 satacker satacker    0 Jan 29 10:38 temp_hard_link</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">4202899 -rw-rw-r--  2 satacker satacker    0 Jan 29 10:38 test.test</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>After removing</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">satacker@ubuntu:~/Desktop$ rm test.test </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">satacker@ubuntu:~/Desktop$ ls -ail | grep "test\|temp_" </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">4202899 -rw-rw-r--  1 satacker satacker    0 Jan 29 10:38 temp_hard_link</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">satacker@ubuntu:~/Desktop$ cat temp_hard_link </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Hello!</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">satacker@ubuntu:~/Desktop$</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>From <a href="https://en.wikipedia.org/wiki/Hard_link" target="_blank" rel="noopener noreferrer">wikipedia</a>
<img loading="lazy" src="https://upload.wikimedia.org/wikipedia/commons/3/32/Hard_Link_Illustration.svg" alt="Wikipedia" class="img_ev3q"></p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="users-and-groups">Users and Groups<a class="hash-link" href="#users-and-groups" title="Direct link to heading">​</a></h3><p>TODO</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="commands">Commands<a class="hash-link" href="#commands" title="Direct link to heading">​</a></h3><p>TOD</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="processes">Processes<a class="hash-link" href="#processes" title="Direct link to heading">​</a></h3><ul><li><code>ps</code> lists the processes that are currently running</li></ul><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">satacker@ubuntu:~/Desktop$ ps ax | grep bash</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   2331 pts/0    Ss+    0:00 bash</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   5458 pts/2    Ss     0:00 bash</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  23896 pts/2    S+     0:00 grep --color=auto bash</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><ul><li>We can kill the process using <code>kill</code> and then the PID from above. <code>pkill</code> allows to kill the process by name.</li><li>Processes can be made background , ex. <code>command &amp;</code> the &amp; followed by command makes it a background process.</li><li>If a foreground process is taking too much time, stop it by pressing Ctrl+Z. A stopped job still exists, but its execution is suspended. To resume the job, but in the background, type <code>bg</code> to send the stopped job to background execution. </li><li>Linux from the shell supports just one active foreground process per virtual terminal. However, from the practical perspective of the user, a windowed environment (e.g., Linux with a desktop, not from a text-based shell) supports several active windows that effectively serve as multiple simultaneous foreground processes. In practice, Linux behind-the-scenes adjusts the priority of processes in a GUI to promote system stability and support end-user processing. <a href="https://www.lifewire.com/multitasking-background-foreground-process-2180219" target="_blank" rel="noopener noreferrer">Source</a></li></ul><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="comments-"><div style="width:100%" id="comments"><div></div></div><a class="hash-link" href="#comments-" title="Direct link to heading">​</a></h2>]]></content:encoded>
            <category>beagle</category>
            <category>linux</category>
        </item>
    </channel>
</rss>